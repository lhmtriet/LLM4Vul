repo_url,hash,committer,committer_date,merge,filename,programming_language,signature,code,label,before_change,added_only,mod_lines
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeElementIndex descriptor : SerialDescriptor,"    override fun decodeElementIndex(descriptor: SerialDescriptor): Int = 0
}",1,True,False,0
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeElementIndex descriptor : SerialDescriptor,"    override fun decodeElementIndex(descriptor: SerialDescriptor): Int = DECODE_DONE
}",0,False,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"createPolymorphicMapDeserializer node : YamlMap , context : SerializersModule , configuration : YamlConfiguration","        private fun createPolymorphicMapDeserializer(node: YamlMap, context: SerializersModule, configuration: YamlConfiguration): YamlPolymorphicInput {
            val desiredKey = configuration.polymorphismPropertyName
            when (val typeName = node.getValue(desiredKey)) {
                is YamlList -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a list"", typeName.path)
                is YamlMap -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a map"", typeName.path)
                is YamlNull -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a null value"", typeName.path)
                is YamlTaggedNode -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a tagged value"", typeName.path)
                is YamlScalar -> {
                    val remainingProperties = node.withoutKey(desiredKey)

                    return YamlPolymorphicInput(typeName.content, typeName.path, remainingProperties, context, configuration)
                }
            }
        }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,get,"            return this.get(desiredKey) ?: throw MissingRequiredPropertyException(desiredKey, this.path)
        }

        private fun YamlMap.withoutKey(key: String): YamlMap {
            return this.copy(entries = entries.filterKeys { it.content != key })
        }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeSerializableValue deserializer : DeserializationStrategy < T >,"    override fun <T> decodeSerializableValue(deserializer: DeserializationStrategy<T>): T {
        try {
            return super.decodeSerializableValue(deserializer)
        } catch (e: SerializationException) {
            throwIfMissingRequiredPropertyException(e)

            throw e
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,throwIfMissingRequiredPropertyException e : SerializationException,"    private fun throwIfMissingRequiredPropertyException(e: SerializationException) {
        val match = missingFieldExceptionMessage.matchEntire(e.message!!) ?: return

        throw MissingRequiredPropertyException(match.groupValues[1], node.path, e)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeEnum enumDescriptor : SerialDescriptor,"    override fun decodeEnum(enumDescriptor: SerialDescriptor): Int {
        val index = enumDescriptor.getElementIndex(scalar.content)

        if (index != UNKNOWN_NAME) {
            return index
        }

        val choices = (0..enumDescriptor.elementsCount - 1)
            .map { enumDescriptor.getElementName(it) }
            .sorted()
            .joinToString("", "")

        throw YamlScalarFormatException(""Value ${scalar.contentToString()} is not a valid option, permitted choices are: $choices"", scalar.path, scalar.content)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeNotNullMark,"    override fun decodeNotNullMark(): Boolean {
        if (!haveStartedReadingElements) {
            return true
        }

        return currentElementDecoder.decodeNotNullMark()
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,beginStructure descriptor : SerialDescriptor,"    override fun beginStructure(descriptor: SerialDescriptor): CompositeDecoder {
        if (haveStartedReadingElements) {
            return currentElementDecoder
        }

        return super.beginStructure(descriptor)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getCurrentPath,"    override fun getCurrentPath(): YamlPath {
        return if (haveStartedReadingElements) {
            currentElementDecoder.node.path
        } else {
            list.path
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getCurrentLocation,"    override fun getCurrentLocation(): Location = getCurrentPath().endLocation
}",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getCurrentPath,"    override fun getCurrentPath(): YamlPath = node.path
}",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeNotNullMark,"    override fun decodeNotNullMark(): Boolean {
        if (!haveStartedReadingEntries) {
            return true
        }

        return fromCurrentValue { decodeNotNullMark() }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,fromCurrentValue action : YamlInput . -> T,"    protected fun <T> fromCurrentValue(action: YamlInput.() -> T): T {
        try {
            return action(currentValueDecoder)
        } catch (e: YamlException) {
            if (currentlyReadingValue) {
                throw InvalidPropertyValueException(propertyName, e.message, e.path, e)
            } else {
                throw e
            }
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getCurrentPath,"    override fun getCurrentPath(): YamlPath {
        return if (haveStartedReadingEntries) {
            currentValueDecoder.node.path
        } else {
            node.path
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,get,"        get() = currentKey.content
}",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,beginStructure descriptor : SerialDescriptor,"    override fun beginStructure(descriptor: SerialDescriptor): CompositeDecoder {
        if (haveStartedReadingEntries) {
            return fromCurrentValue { beginStructure(descriptor) }
        }

        return super.beginStructure(descriptor)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"throwUnknownProperty name : String , path : YamlPath , desc : SerialDescriptor","    private fun throwUnknownProperty(name: String, path: YamlPath, desc: SerialDescriptor): Nothing {
        val knownPropertyNames = (0 until desc.elementsCount)
            .map { desc.getElementName(it) }
            .toSet()

        throw UnknownPropertyException(name, knownPropertyNames, path)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,beginStructure descriptor : SerialDescriptor,"    override fun beginStructure(descriptor: SerialDescriptor): CompositeDecoder {
        if (haveStartedReadingEntries) {
            return fromCurrentValue { beginStructure(descriptor) }
        }

        return super.beginStructure(descriptor)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,beginStructure descriptor : SerialDescriptor,"    override fun beginStructure(descriptor: SerialDescriptor): CompositeDecoder {
        return when (currentField) {
            CurrentField.NotStarted, CurrentField.Type -> super.beginStructure(descriptor)
            CurrentField.Content -> {
                contentDecoder = createFor(contentNode, serializersModule, configuration, descriptor)

                return contentDecoder
            }
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"maybeCallOnContent blockOnType : -> T , blockOnContent : YamlInput . -> T","    private inline fun <T> maybeCallOnContent(blockOnType: () -> T, blockOnContent: YamlInput.() -> T): T {
        return when (currentField) {
            CurrentField.NotStarted, CurrentField.Type -> blockOnType()
            CurrentField.Content -> contentDecoder.blockOnContent()
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,decodeSerializableValue deserializer : DeserializationStrategy < T >,"    override fun <T> decodeSerializableValue(deserializer: DeserializationStrategy<T>): T {
        try {
            return super.decodeSerializableValue(deserializer)
        } catch (e: SerializationException) {
            throwIfUnknownPolymorphicTypeException(e, deserializer)

            throw e
        }
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"throwIfUnknownPolymorphicTypeException e : Exception , deserializer : DeserializationStrategy < * >","    private fun throwIfUnknownPolymorphicTypeException(e: Exception, deserializer: DeserializationStrategy<*>) {
        val message = e.message ?: return
        val match = unknownPolymorphicTypeExceptionMessage.matchEntire(message) ?: return
        val unknownType = match.groupValues[1]
        val className = match.groupValues[2]

        val knownTypes = when (deserializer.descriptor.kind) {
            PolymorphicKind.SEALED -> getKnownTypesForSealedType(deserializer)
            PolymorphicKind.OPEN -> getKnownTypesForOpenType(className)
            else -> throw IllegalArgumentException(""Can't get known types for descriptor of kind ${deserializer.descriptor.kind}"")
        }

        throw UnknownPolymorphicTypeException(unknownType, knownTypes, typeNamePath, e)
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getKnownTypesForSealedType deserializer : DeserializationStrategy < * >,"    private fun getKnownTypesForSealedType(deserializer: DeserializationStrategy<*>): Set<String> {
        val typesDescriptor = deserializer.descriptor.getElementDescriptor(1)

        return typesDescriptor.elementNames.toSet()
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"contextual kClass : KClass < T > , provider : typeArgumentsSerializers : List < KSerializer < * > > -> KSerializer < * >","            override fun <T : Any> contextual(kClass: KClass<T>, provider: (typeArgumentsSerializers: List<KSerializer<*>>) -> KSerializer<*>) {}",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"polymorphic baseClass : KClass < Base > , actualClass : KClass < Sub > , actualSerializer : KSerializer < Sub >","            override fun <Base : Any, Sub : Base> polymorphic(baseClass: KClass<Base>, actualClass: KClass<Sub>, actualSerializer: KSerializer<Sub>) {
                if (baseClass.simpleName == className) {
                    knownTypes.add(actualSerializer.descriptor.serialName)
                }
            }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"polymorphicDefault baseClass : KClass < Base > , defaultSerializerProvider : className : String? -> DeserializationStrategy < out Base > ?","            override fun <Base : Any> polymorphicDefault(baseClass: KClass<Base>, defaultSerializerProvider: (className: String?) -> DeserializationStrategy<out Base>?) {
                throw UnsupportedOperationException(""This method should never be called."")
            }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,getKnownTypesForOpenType className : String,"    private fun getKnownTypesForOpenType(className: String): Set<String> {
        val knownTypes = mutableSetOf<String>()

        serializersModule.dumpTo(object : SerializersModuleCollector {
            override fun <T : Any> contextual(kClass: KClass<T>, provider: (typeArgumentsSerializers: List<KSerializer<*>>) -> KSerializer<*>) {}

            // FIXME: ideally we'd be able to get the name as used by the SerialModule (eg. the values in 'polyBase2NamedSerializers' in SerialModuleImpl, but these aren't exposed.
            // The serializer's descriptor's name seems to be the same value.
            override fun <Base : Any, Sub : Base> polymorphic(baseClass: KClass<Base>, actualClass: KClass<Sub>, actualSerializer: KSerializer<Sub>) {
                if (baseClass.simpleName == className) {
                    knownTypes.add(actualSerializer.descriptor.serialName)
                }
            }

            override fun <Base : Any> polymorphicDefault(baseClass: KClass<Base>, defaultSerializerProvider: (className: String?) -> DeserializationStrategy<out Base>?) {
                throw UnsupportedOperationException(""This method should never be called."")
            }
        })

        return knownTypes
    }",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,"maybeCallOnContent functionName : String , blockOnContent : YamlInput . -> T","    private inline fun <T> maybeCallOnContent(functionName: String, blockOnContent: YamlInput.() -> T): T =
        maybeCallOnContent(blockOnType = { throw UnsupportedOperationException(""Can't call $functionName() on type field"") }, blockOnContent = blockOnContent)

    private inline fun <T> maybeCallOnContent(blockOnType: () -> T, blockOnContent: YamlInput.() -> T): T {
        return when (currentField) {
            CurrentField.NotStarted, CurrentField.Type -> blockOnType()
            CurrentField.Content -> contentDecoder.blockOnContent()
        }
    }

    override fun <T> decodeSerializableValue(deserializer: DeserializationStrategy<T>): T {
        try {
            return super.decodeSerializableValue(deserializer)
        } catch (e: SerializationException) {
            throwIfUnknownPolymorphicTypeException(e, deserializer)

            throw e
        }
    }

    private fun throwIfUnknownPolymorphicTypeException(e: Exception, deserializer: DeserializationStrategy<*>) {
        val message = e.message ?: return
        val match = unknownPolymorphicTypeExceptionMessage.matchEntire(message) ?: return
        val unknownType = match.groupValues[1]
        val className = match.groupValues[2]

        val knownTypes = when (deserializer.descriptor.kind) {
            PolymorphicKind.SEALED -> getKnownTypesForSealedType(deserializer)
            PolymorphicKind.OPEN -> getKnownTypesForOpenType(className)
            else -> throw IllegalArgumentException(""Can't get known types for descriptor of kind ${deserializer.descriptor.kind}"")
        }

        throw UnknownPolymorphicTypeException(unknownType, knownTypes, typeNamePath, e)
    }

    private fun getKnownTypesForSealedType(deserializer: DeserializationStrategy<*>): Set<String> {
        val typesDescriptor = deserializer.descriptor.getElementDescriptor(1)

        return typesDescriptor.elementNames.toSet()
    }

    private fun getKnownTypesForOpenType(className: String): Set<String> {
        val knownTypes = mutableSetOf<String>()

        serializersModule.dumpTo(object : SerializersModuleCollector {
            override fun <T : Any> contextual(kClass: KClass<T>, provider: (typeArgumentsSerializers: List<KSerializer<*>>) -> KSerializer<*>) {}

            // FIXME: ideally we'd be able to get the name as used by the SerialModule (eg. the values in 'polyBase2NamedSerializers' in SerialModuleImpl, but these aren't exposed.
            // The serializer's descriptor's name seems to be the same value.
            override fun <Base : Any, Sub : Base> polymorphic(baseClass: KClass<Base>, actualClass: KClass<Sub>, actualSerializer: KSerializer<Sub>) {
                if (baseClass.simpleName == className) {
                    knownTypes.add(actualSerializer.descriptor.serialName)
                }
            }

            override fun <Base : Any> polymorphicDefault(baseClass: KClass<Base>, defaultSerializerProvider: (className: String?) -> DeserializationStrategy<out Base>?) {
                throw UnsupportedOperationException(""This method should never be called."")
            }
        })

        return knownTypes
    }

    private enum class CurrentField {
        NotStarted,
        Type,
        Content
    }

    companion object {
        private val unknownPolymorphicTypeExceptionMessage: Regex = """"""^Class '(.*)' is not registered for polymorphic serialization in the scope of '(.*)'.\nMark the base class as 'sealed' or register the serializer explicitly.$"""""".toRegex()
    }
}",0,True,False,
https://github.com/charleskorn/kaml.git,e18785d043fc6324c81e968aae9764b4b060bc6a,Charles Korn,2021-09-05 16:26:07+10:00,False,YamlInput.kt,Kotlin,get,"    get() {
        return when (this) {
            is StructureKind.MAP -> ""a map""
            is StructureKind.CLASS -> ""an object""
            is StructureKind.OBJECT -> ""an object""
            is StructureKind.LIST -> ""a list""
            is PrimitiveKind.STRING -> ""a string""
            is PrimitiveKind.BOOLEAN -> ""a boolean""
            is PrimitiveKind.BYTE -> ""a byte""
            is PrimitiveKind.CHAR -> ""a character""
            is PrimitiveKind.DOUBLE -> ""a double""
            is PrimitiveKind.FLOAT -> ""a float""
            is PrimitiveKind.INT -> ""an integer""
            is PrimitiveKind.SHORT -> ""a short""
            is PrimitiveKind.LONG -> ""a long""
            is SerialKind.ENUM -> ""an enumeration value""
            else -> ""a $this value""
        }
    }",0,True,False,
https://github.com/openMF/mifos-mobile.git,5840b39200b1ba7f27f8d7ee4c2c73bbebb5f41c,intrigus,2021-02-16 21:36:14+01:00,True,SelfServiceOkHttpClient.kt,Kotlin,"checkClientTrusted chain : Array < X509Certificate > , authType : String","                            override fun checkClientTrusted(
                                    chain: Array<X509Certificate>,
                                    authType: String
                            ) {
                            }",1,True,False,"0,1,2,3,4"
https://github.com/openMF/mifos-mobile.git,5840b39200b1ba7f27f8d7ee4c2c73bbebb5f41c,intrigus,2021-02-16 21:36:14+01:00,True,SelfServiceOkHttpClient.kt,Kotlin,"checkServerTrusted chain : Array < X509Certificate > , authType : String","                            override fun checkServerTrusted(
                                    chain: Array<X509Certificate>,
                                    authType: String
                            ) {
                            }",1,True,False,"0,1,2,3,4"
https://github.com/openMF/mifos-mobile.git,5840b39200b1ba7f27f8d7ee4c2c73bbebb5f41c,intrigus,2021-02-16 21:36:14+01:00,True,SelfServiceOkHttpClient.kt,Kotlin,getAcceptedIssuers,"                            override fun getAcceptedIssuers(): Array<X509Certificate?> {
                                return arrayOfNulls(0)
                            }",1,True,False,"0,1,2"
https://github.com/detekt/detekt.git,c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395,GitHub,2022-01-18 18:21:06+01:00,False,BaselineFormat.kt,Kotlin,read path : Path,"    fun read(path: Path): Baseline {
        try {
            Files.newInputStream(path).use {
                val reader = SAXParserFactory.newInstance().newSAXParser()
                val handler = BaselineHandler()
                reader.parse(it, handler)
                return handler.createBaseline()
            }
        } catch (error: SAXParseException) {
            val (line, column) = error.lineNumber to error.columnNumber
            throw InvalidState(""Error on position $line:$column while reading the baseline xml file!"", error)
        }
    }",1,True,False,3
https://github.com/detekt/detekt.git,c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395,GitHub,2022-01-18 18:21:06+01:00,False,BaselineFormat.kt,Kotlin,read path : Path,"    fun read(path: Path): Baseline {
        try {
            Files.newInputStream(path).use {
                val reader = SAXParserFactory.newInstance()
                    .apply {
                        setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
                    }
                    .newSAXParser()
                val handler = BaselineHandler()
                reader.parse(it, handler)
                return handler.createBaseline()
            }
        } catch (error: SAXParseException) {
            val (line, column) = error.lineNumber to error.columnNumber
            throw InvalidState(""Error on position $line:$column while reading the baseline xml file!"", error)
        }
    }",0,False,False,
https://github.com/detekt/detekt.git,c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395,GitHub,2022-01-18 18:21:06+01:00,False,BaselineFormat.kt,Kotlin,"write baseline : Baseline , path : Path","    fun write(baseline: Baseline, path: Path) {
        try {
            Files.newBufferedWriter(path).addFinalNewLine().use {
                it.streamXml().prettyPrinter().save(baseline)
            }
        } catch (error: XMLStreamException) {
            val (line, column) = error.positions
            throw InvalidState(""Error on position $line:$column while writing the baseline xml file!"", error)
        }
    }",0,True,False,
https://github.com/detekt/detekt.git,c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395,GitHub,2022-01-18 18:21:06+01:00,False,BaselineFormat.kt,Kotlin,XMLStreamWriter,"    private fun XMLStreamWriter.save(baseline: Baseline) {
        document {
            tag(SMELL_BASELINE) {
                tag(MANUALLY_SUPPRESSED_ISSUES) {
                    baseline.manuallySuppressedIssues.forEach { tag(ID, it) }
                }
                tag(CURRENT_ISSUES) {
                    baseline.currentIssues.forEach { tag(ID, it) }
                }
            }
        }
    }
}",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,RadarCovidApplication.kt,Kotlin,onCreate,"    override fun onCreate() {
        super.onCreate()

        initRxJavaSettings()

        DP3T.init(
            this,
            ApplicationInfo(packageName, BuildConfig.REPORT_URL, BuildConfig.BUCKET_URL),
            SignatureUtil.getPublicKeyFromBase64OrThrow(BuildConfig.PUBLIC_KEY),
            BuildConfig.DEBUG
        )
        DP3T.setCertificatePinner(certificatePinner)
        DP3T.setUserAgent(userAgent)

        registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())

    }",1,True,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,RadarCovidApplication.kt,Kotlin,onCreate,"    override fun onCreate() {
        super.onCreate()

        initRxJavaSettings()

        DP3T.init(
            this,
            ApplicationInfo(packageName, BuildConfig.REPORT_URL, BuildConfig.BUCKET_URL),
            SignatureUtil.getPublicKeyFromBase64OrThrow(BuildConfig.PUBLIC_KEY),
            BuildConfig.DEBUG
        )
        DP3T.setCertificatePinner(certificatePinner)
        DP3T.setUserAgent(userAgent)

        FakeInfectionReportWorker.start(this)

        registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())

    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,RadarCovidApplication.kt,Kotlin,initRxJavaSettings,"    private fun initRxJavaSettings() {
        RxJavaPlugins.setErrorHandler {
            if (BuildConfig.DEBUG)
                it.printStackTrace()
        }
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,RadarCovidApplication.kt,Kotlin,applicationInjector,"    override fun applicationInjector(): AndroidInjector<out DaggerApplication> =
        DaggerApplicationComponent.builder()
            .applicationContext(this)
            .build()

    private fun initRxJavaSettings() {
        RxJavaPlugins.setErrorHandler {
            if (BuildConfig.DEBUG)
                it.printStackTrace()
        }
    }

}",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,RepositoryModule.kt,Kotlin,providesApiRepository repository : ApiRepositoryImpl,"    fun providesApiRepository(repository: ApiRepositoryImpl): ApiRepository = repository

}",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,ExampleRepositoryImpl.kt,Kotlin,exampleRequest,"    override fun exampleRequest(): Either<Throwable, String> = callService {
        apiInterface.test()
    }

}",1,True,False,"0,1,2,3,4"
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,FakeInfectionReportRepositoryImpl.kt,Kotlin,notifyFakeInfected authCode : String,"    override fun notifyFakeInfected(authCode: String): Completable =
        Completable.create {
            if (BuildConfig.isMock) {
                it.onComplete()
            } else {
                DP3T.sendFakeInfectedRequest(context,
                    ExposeeAuthMethodAuthorization(""Bearer $authCode""),
                    { it.onComplete() },
                    { it.onError(Exception(""Error notifying fake infection"")) }
                )
            }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,ReportInfectedUseCase.kt,Kotlin,reportInfected reportCode : String,"    fun reportInfected(reportCode: String): Completable {

        return getVerifyToken(reportCode).flatMapCompletable {
            contactTracingRepository.notifyInfected(it.token, jwtTokenUtils.getOnset(it.token))
        }.concatWith {
            preferencesRepository.setInfectionReportDate(Date())
            it.onComplete()
        }

    }",1,True,False,"0,1,2,3,4,5,6,9"
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,FakeInfectionReportWorker.kt,Kotlin,getRandomDelay,"        private fun getRandomDelay(): Long = Random.nextLong(180, 360)

    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,FakeInfectionReportWorker.kt,Kotlin,start context : Context,"        fun start(context: Context) {
            start(context, getRandomDelay(), ExistingWorkPolicy.KEEP)
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        if (BuildConfig.DEBUG)
            DP3T.addWorkerStartedToHistory(applicationContext, TAG)
        reportFakeInfectionUseCase.reportFakeInfection().subscribe()
        start(applicationContext, getRandomDelay(), ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,91dcfff6252055637bc9ee0c46b8f003d64a16b9,Alberto Vecina Sánchez,2020-09-25 09:30:31+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , delayInMinutes : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            delayInMinutes: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(delayInMinutes, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,RadarCovidApplication.kt,Kotlin,onCreate,"    override fun onCreate() {
        super.onCreate()

        initRxJavaSettings()

        DP3T.init(
            this,
            ApplicationInfo(packageName, BuildConfig.REPORT_URL, BuildConfig.BUCKET_URL),
            SignatureUtil.getPublicKeyFromBase64OrThrow(BuildConfig.PUBLIC_KEY),
            BuildConfig.DEBUG
        )
        DP3T.setCertificatePinner(certificatePinner)
        DP3T.setUserAgent(userAgent)

        FakeInfectionReportWorker.start(this)

        registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())

    }",1,True,False,14
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,RadarCovidApplication.kt,Kotlin,onCreate,"    override fun onCreate() {
        super.onCreate()

        initRxJavaSettings()

        DP3T.init(
            this,
            ApplicationInfo(packageName, BuildConfig.REPORT_URL, BuildConfig.BUCKET_URL),
            SignatureUtil.getPublicKeyFromBase64OrThrow(BuildConfig.PUBLIC_KEY),
            BuildConfig.DEBUG
        )
        DP3T.setCertificatePinner(certificatePinner)
        DP3T.setUserAgent(userAgent)

        FakeInfectionReportWorker.start(this, preferencesRepository)

        registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())

    }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,RadarCovidApplication.kt,Kotlin,initRxJavaSettings,"    private fun initRxJavaSettings() {
        RxJavaPlugins.setErrorHandler {
            if (BuildConfig.DEBUG)
                it.printStackTrace()
        }
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,RadarCovidApplication.kt,Kotlin,applicationInjector,"    override fun applicationInjector(): AndroidInjector<out DaggerApplication> =
        DaggerApplicationComponent.builder()
            .applicationContext(this)
            .build()

    private fun initRxJavaSettings() {
        RxJavaPlugins.setErrorHandler {
            if (BuildConfig.DEBUG)
                it.printStackTrace()
        }
    }

}",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getSelectedLanguage,"    override fun getSelectedLanguage(): String =
        preferences.getString(KEY_CURRENT_LANGUAGE, ""es-ES"") ?: ""es-ES""

    override fun setLabels(labels: Map<String, String>) {
        preferences.edit()
            .putString(KEY_LABELS, labels.toJson())
            .apply()
    }

    override fun getLabels(): Map<String, String> {
        val itemType = object : TypeToken<HashMap<String, String>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LABELS, ""{\""test\"":\""Hola Label\""}""
            ),
            itemType
        )
    }

    override fun setLanguages(languages: List<Language>) {
        preferences.edit()
            .putString(KEY_LANGUAGES, languages.toJson())
            .apply()
    }

    override fun getLanguages(): List<Language> {
        val itemType = object : TypeToken<List<Language>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LANGUAGES, ""[]""
            ),
            itemType
        )
    }

    override fun setRegions(regions: List<Region>) {
        preferences.edit()
            .putString(KEY_REGIONS, regions.toJson())
            .apply()
    }

    override fun getRegions(): List<Region> {
        val itemType = object : TypeToken<List<Region>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_REGIONS, ""[]""
            ),
            itemType
        )
    }

    override fun setHealingTime(healingTime: HealingTime) {
        preferences.edit()
            .putString(KEY_HEALING_TIME, healingTime.toJson())
            .apply()
    }

    override fun getHealingTime(): HealingTime {
        val healingTimeJson = preferences.getString(
            KEY_HEALING_TIME,
            ""{\n"" +
                    ""        \""exposureHighMinutes\"": 20160,\n"" +
                    ""        \""infectedMinutes\"": 43200\n"" +
                    ""    }""
        )
        return Gson().fromJson(healingTimeJson, HealingTime::class.java)
    }

}",1,True,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getTDummy,"    override fun getTDummy(): Long {
        return preferences.getLong(KEY_T_DUMMY, -1)
    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getSelectedLanguage,"    override fun getSelectedLanguage(): String =
        preferences.getString(KEY_CURRENT_LANGUAGE, ""es-ES"") ?: ""es-ES""

    override fun setLabels(labels: Map<String, String>) {
        preferences.edit()
            .putString(KEY_LABELS, labels.toJson())
            .apply()
    }

    override fun getLabels(): Map<String, String> {
        val itemType = object : TypeToken<HashMap<String, String>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LABELS, ""{\""test\"":\""Hola Label\""}""
            ),
            itemType
        )
    }

    override fun setLanguages(languages: List<Language>) {
        preferences.edit()
            .putString(KEY_LANGUAGES, languages.toJson())
            .apply()
    }

    override fun getLanguages(): List<Language> {
        val itemType = object : TypeToken<List<Language>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LANGUAGES, ""[]""
            ),
            itemType
        )
    }

    override fun setRegions(regions: List<Region>) {
        preferences.edit()
            .putString(KEY_REGIONS, regions.toJson())
            .apply()
    }

    override fun getRegions(): List<Region> {
        val itemType = object : TypeToken<List<Region>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_REGIONS, ""[]""
            ),
            itemType
        )
    }

    override fun setHealingTime(healingTime: HealingTime) {
        preferences.edit()
            .putString(KEY_HEALING_TIME, healingTime.toJson())
            .apply()
    }

    override fun getHealingTime(): HealingTime {
        val healingTimeJson = preferences.getString(
            KEY_HEALING_TIME,
            ""{\n"" +
                    ""        \""exposureHighMinutes\"": 20160,\n"" +
                    ""        \""infectedMinutes\"": 43200\n"" +
                    ""    }""
        )
        return Gson().fromJson(healingTimeJson, HealingTime::class.java)
    }

    override fun getTDummy(): Long {
        return preferences.getLong(KEY_T_DUMMY, -1)
    }

    override fun setTDummy(time: Long) {
        preferences.edit().putLong(KEY_T_DUMMY, time).apply()
    }

}",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setTDummy time : Long,"    override fun setTDummy(time: Long) {
        preferences.edit().putLong(KEY_T_DUMMY, time).apply()
    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setOnboardingCompleted onboardingCompleted : Boolean,"    override fun setOnboardingCompleted(onboardingCompleted: Boolean) {
        preferences
            .edit()
            .putBoolean(KEY_ONBOARDING_COMPLETED, onboardingCompleted)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setUuid uuid : String,"    override fun setUuid(uuid: String) {
        preferences
            .edit()
            .putString(KEY_UUID, uuid)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getInfectionReportDate,"    override fun getInfectionReportDate(): Date? {
        val infectionReportDateMillis = preferences.getLong(KEY_INFECTION_REPORT_DATE, 0)
        return if (infectionReportDateMillis == 0L)
            null
        else
            Date(infectionReportDateMillis)
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setInfectionReportDate date : Date,"    override fun setInfectionReportDate(date: Date) {
        preferences.edit()
            .putLong(KEY_INFECTION_REPORT_DATE, date.time)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setExposed exposed : Boolean,"    override fun setExposed(exposed: Boolean) {
        preferences.edit()
            .putBoolean(KEY_WAS_EXPOSED, exposed)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setSelectedRegion region : String,"    override fun setSelectedRegion(region: String) {
        preferences.edit()
            .putString(KEY_CURRENT_REGION, region)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setSelectedLanguage language : String,"    override fun setSelectedLanguage(language: String) {
        preferences.edit()
            .putString(KEY_CURRENT_LANGUAGE, language)
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,"setLabels labels : Map < String , String >","    override fun setLabels(labels: Map<String, String>) {
        preferences.edit()
            .putString(KEY_LABELS, labels.toJson())
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getLabels,"    override fun getLabels(): Map<String, String> {
        val itemType = object : TypeToken<HashMap<String, String>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LABELS, ""{\""test\"":\""Hola Label\""}""
            ),
            itemType
        )
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setLanguages languages : List < Language >,"    override fun setLanguages(languages: List<Language>) {
        preferences.edit()
            .putString(KEY_LANGUAGES, languages.toJson())
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getLanguages,"    override fun getLanguages(): List<Language> {
        val itemType = object : TypeToken<List<Language>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LANGUAGES, ""[]""
            ),
            itemType
        )
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setRegions regions : List < Region >,"    override fun setRegions(regions: List<Region>) {
        preferences.edit()
            .putString(KEY_REGIONS, regions.toJson())
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getRegions,"    override fun getRegions(): List<Region> {
        val itemType = object : TypeToken<List<Region>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_REGIONS, ""[]""
            ),
            itemType
        )
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,setHealingTime healingTime : HealingTime,"    override fun setHealingTime(healingTime: HealingTime) {
        preferences.edit()
            .putString(KEY_HEALING_TIME, healingTime.toJson())
            .apply()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,PreferencesRepositoryImpl.kt,Kotlin,getHealingTime,"    override fun getHealingTime(): HealingTime {
        val healingTimeJson = preferences.getString(
            KEY_HEALING_TIME,
            ""{\n"" +
                    ""        \""exposureHighMinutes\"": 20160,\n"" +
                    ""        \""infectedMinutes\"": 43200\n"" +
                    ""    }""
        )
        return Gson().fromJson(healingTimeJson, HealingTime::class.java)
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,getRandomDelay,"        private fun getRandomDelay(): Long = Random.nextLong(180, 360)

    }",1,True,False,0
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,start context : Context,"        fun start(context: Context) {
            start(context, getRandomDelay(), ExistingWorkPolicy.KEEP)
        }",1,True,False,"0,1"
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        if (BuildConfig.DEBUG)
            DP3T.addWorkerStartedToHistory(applicationContext, TAG)
        reportFakeInfectionUseCase.reportFakeInfection().subscribe()
        start(applicationContext, getRandomDelay(), ExistingWorkPolicy.APPEND)
        return Result.success()
    }",1,True,False,"1,2,3,4"
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , delayInMinutes : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            delayInMinutes: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(delayInMinutes, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",1,True,False,"2,11"
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS) as Long
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -Math.log(1.0 - random.nextDouble())
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)
            val executionDelayDays =
                executionDelay / FACTOR_DAY_MILLIS

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelayDays, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,53252773ffa81e116deabcbbea3bac96872b9888,Oscar Rodriguez,2020-10-08 10:27:13+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -Math.log(1.0 - random.nextDouble())
        }",1,True,False,2
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS) as Long
        }",1,True,False,3
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)
            val executionDelayDays =
                executionDelay / FACTOR_DAY_MILLIS

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelayDays, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,8e5d14ec60e0c1847a4733556cf34d232c27102c,Oscar Rodriguez,2020-10-08 11:22:28+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)
            val executionDelayDays =
                executionDelay / FACTOR_DAY_MILLIS

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelayDays, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",1,True,False,17
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)
            val executionDelayDays =
                executionDelay / FACTOR_DAY_MILLIS

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelayDays, TimeUnit.MILLISECONDS)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,ea0c4cc837f72f58e2b5df1ecf0899743ec3cdf8,Oscar Rodriguez,2020-10-08 13:06:12+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)
            val executionDelayDays =
                executionDelay / FACTOR_DAY_MILLIS

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelayDays, TimeUnit.MILLISECONDS)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",1,True,False,"8,9,17"
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",1,True,True,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            // only do request if it was planned to do in the last 48h
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0,False,True,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelay, TimeUnit.MILLISECONDS)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,7fdc7debeb8a37faa77b53d9f9a1b4bbcff445ce,Oscar Rodriguez,2020-10-14 18:46:39+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            // only do request if it was planned to do in the last 48h
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",1,True,False,14
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            // only do request if it was planned to do in the last 48h
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.REPLACE)
        return Result.success()
    }",0,False,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelay, TimeUnit.MILLISECONDS)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,9627f4d69705bca68e550eefd3df1b9abe90b215,Oscar Rodriguez,2020-10-15 18:38:43+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , preferencesRepository : PreferencesRepository","        fun start(context: Context, preferencesRepository: PreferencesRepository) {
            var tDummy: Long = preferencesRepository.getTDummy()
            if (tDummy == -1L) {
                tDummy = clock.currentTimeMillis() + clock.syncInterval()
                preferencesRepository.setTDummy(tDummy)
            }
            start(context, tDummy, ExistingWorkPolicy.KEEP)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,"start context : Context , tDummy : Long , existingWorkPolicy : ExistingWorkPolicy","        private fun start(
            context: Context,
            tDummy: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {

            val now = clock.currentTimeMillis()
            val executionDelay = 0L.coerceAtLeast(tDummy - now)

            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(executionDelay, TimeUnit.MILLISECONDS)
                    .setConstraints(constraints)
                    .setInputData(Data.Builder().putLong(KEY_T_DUMMY, tDummy).build())
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,doWork,"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            // only do request if it was planned to do in the last 48h
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.REPLACE)
        return Result.success()
    }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,syncInterval,"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,currentTimeMillis,"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0,True,False,
https://github.com/RadarCOVID/radar-covid-android.git,09d00e5ede801ca400d45c7feda5a99c34e4176c,Oscar Rodriguez,2020-10-16 15:04:26+02:00,False,FakeInfectionReportWorker.kt,Kotlin,sampleFromStandard,"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0,True,False,
