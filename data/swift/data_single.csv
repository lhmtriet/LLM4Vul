processed_func,target,flaw_line_index,flaw_line
"private func createHTTPRequest() {

        let urlRequest = CFHTTPMessageCreateRequest(kCFAllocatorDefault, ""GET"" as CFString,
                                                    url as CFURL, kCFHTTPVersion1_1).takeRetainedValue()

        var port = url.port
        if port == nil {
            if supportedSSLSchemes.contains(url.scheme!) {
                port = 443
            } else {
                port = 80
            }
        }
        addHeader(urlRequest, key: headerWSUpgradeName, val: headerWSUpgradeValue)
        addHeader(urlRequest, key: headerWSConnectionName, val: headerWSConnectionValue)
        if let protocols = optionalProtocols {
            addHeader(urlRequest, key: headerWSProtocolName, val: protocols.joined(separator: "",""))
        }
        addHeader(urlRequest, key: headerWSVersionName, val: headerWSVersionValue)
        addHeader(urlRequest, key: headerWSKeyName, val: generateWebSocketKey())
        if let origin = origin {
            addHeader(urlRequest, key: headerOriginName, val: origin)
        }
        addHeader(urlRequest, key: headerWSHostName, val: ""\(url.host!):\(port!)"")
        for (key, value) in headers {
            addHeader(urlRequest, key: key, val: value)
        }
        if let cfHTTPMessage = CFHTTPMessageCopySerializedMessage(urlRequest) {
            let serializedRequest = cfHTTPMessage.takeRetainedValue()
            initStreamsWithData(serializedRequest as Data, Int(port!))
        }
    }",1,1,
"open func stream(_ aStream: Stream, handle eventCode: Stream.Event) {
        if let sec = security, !certValidated && [.hasBytesAvailable, .hasSpaceAvailable].contains(eventCode) {
            let trust = aStream.property(forKey: kCFStreamPropertySSLPeerTrust as Stream.PropertyKey) as! SecTrust
            let domain = aStream.property(forKey: kCFStreamSSLPeerName as Stream.PropertyKey) as? String
            if sec.isValid(trust, domain: domain) {
                certValidated = true
            } else {
                let error = errorWithDetail(""Invalid SSL certificate"", code: 1)
                disconnectStream(error)
                return
            }
        }
        if eventCode == .hasBytesAvailable {
            if aStream == inputStream {
                processInputStream()
            }
        } else if eventCode == .errorOccurred {
            disconnectStream(aStream.streamError as NSError?)
        } else if eventCode == .endEncountered {
            disconnectStream(nil)
        }
    }",1,"1,2,3,4,5,6,7,8,9,10,11","if let sec = security, !certValidated && [.hasBytesAvailable, .hasSpaceAvailable].contains(eventCode) {/~/            let trust = aStream.property(forKey: kCFStreamPropertySSLPeerTrust as Stream.PropertyKey) as! SecTrust/~/            let domain = aStream.property(forKey: kCFStreamSSLPeerName as Stream.PropertyKey) as? String/~/            if sec.isValid(trust, domain: domain) {/~/                certValidated = true/~/            } else {/~/                let error = errorWithDetail(""Invalid SSL certificate"", code: 1)/~/                disconnectStream(error)/~/                return/~/            }/~/        }"
"private func initStreamsWithData(_ data: Data, _ port: Int) {
        
        

        
        disconnectStream(nil, runDelegate: false)

        var readStream: Unmanaged<CFReadStream>?
        var writeStream: Unmanaged<CFWriteStream>?
        let h = url.host! as NSString
        CFStreamCreatePairWithSocketToHost(nil, h, UInt32(port), &readStream, &writeStream)
        inputStream = readStream!.takeRetainedValue()
        outputStream = writeStream!.takeRetainedValue()
        guard let inStream = inputStream, let outStream = outputStream else { return }
        inStream.delegate = self
        outStream.delegate = self
        if supportedSSLSchemes.contains(url.scheme!) {
            inStream.setProperty(StreamSocketSecurityLevel.negotiatedSSL as AnyObject, forKey: Stream.PropertyKey.socketSecurityLevelKey)
            outStream.setProperty(StreamSocketSecurityLevel.negotiatedSSL as AnyObject, forKey: Stream.PropertyKey.socketSecurityLevelKey)
            if disableSSLCertValidation {
                let settings: [NSObject: NSObject] = [kCFStreamSSLValidatesCertificateChain: NSNumber(value: false), kCFStreamSSLPeerName: kCFNull]
                inStream.setProperty(settings, forKey: kCFStreamPropertySSLSettings as Stream.PropertyKey)
                outStream.setProperty(settings, forKey: kCFStreamPropertySSLSettings as Stream.PropertyKey)
            }
            if let cipherSuites = self.enabledSSLCipherSuites {
                if let sslContextIn = CFReadStreamCopyProperty(inputStream, CFStreamPropertyKey(rawValue: kCFStreamPropertySSLContext)) as! SSLContext?,
                    let sslContextOut = CFWriteStreamCopyProperty(outputStream, CFStreamPropertyKey(rawValue: kCFStreamPropertySSLContext)) as! SSLContext? {
                    let resIn = SSLSetEnabledCiphers(sslContextIn, cipherSuites, cipherSuites.count)
                    let resOut = SSLSetEnabledCiphers(sslContextOut, cipherSuites, cipherSuites.count)
                    if resIn != errSecSuccess {
                        let error = self.errorWithDetail(""Error setting ingoing cypher suites"", code: UInt16(resIn))
                        disconnectStream(error)
                        return
                    }
                    if resOut != errSecSuccess {
                        let error = self.errorWithDetail(""Error setting outgoing cypher suites"", code: UInt16(resOut))
                        disconnectStream(error)
                        return
                    }
                }
            }
        } else {
            certValidated = true 
        }
        if voipEnabled {
            inStream.setProperty(StreamNetworkServiceTypeValue.voIP as AnyObject, forKey: Stream.PropertyKey.networkServiceType)
            outStream.setProperty(StreamNetworkServiceTypeValue.voIP as AnyObject, forKey: Stream.PropertyKey.networkServiceType)
        }
        
        CFReadStreamSetDispatchQueue(inStream, WebSocket.sharedWorkQueue)
        CFWriteStreamSetDispatchQueue(outStream, WebSocket.sharedWorkQueue)
        inStream.open()
        outStream.open()

        self.mutex.lock()
        self.readyToWrite = true
        self.mutex.unlock()
        
        let bytes = UnsafeRawPointer((data as NSData).bytes).assumingMemoryBound(to: UInt8.self)
        var out = timeout * 1_000_000 
        let operation = BlockOperation()
        operation.addExecutionBlock { [weak self, weak operation] in
            guard let sOperation = operation else { return }
            while !outStream.hasSpaceAvailable && !sOperation.isCancelled {
                usleep(100) 
                guard !sOperation.isCancelled else { return }
                out -= 100
                if out < 0 {
                    self?.cleanupStream()
                    self?.doDisconnect(self?.errorWithDetail(""write wait timed out"", code: 2))
                    return
                } else if outStream.streamError != nil {
                    return 
                }
            }
            guard !sOperation.isCancelled else { return }
            outStream.write(bytes, maxLength: data.count)
        }
        writeQueue.addOperation(operation)
    }",1,"68,75",                    self?.cleanupStream()/~/            guard !sOperation.isCancelled else { return }
"public init(url: URL, protocols: [String]? = nil) {
        self.url = url
        self.origin = url.absoluteString
        if let hostUrl = URL (string: ""/"", relativeTo: url) {
            var origin = hostUrl.absoluteString
            origin.remove(at: origin.index(before: origin.endIndex))
            self.origin = origin
        }
        writeQueue.maxConcurrentOperationCount = 1
        optionalProtocols = protocols
    }",0,,
"        self.init(url: url, protocols: protocols)
        writeQueue.qualityOfService = writeQueueQOS
    }

    


    open func connect() {
        guard !isConnecting else { return }
        didDisconnect = false
        isConnecting = true
        createHTTPRequest()
    }",0,,
"open func disconnect(forceTimeout: TimeInterval? = nil, closeCode: UInt16 = CloseCode.normal.rawValue) {
        guard isConnected else { return }
        switch forceTimeout {
        case .some(let seconds) where seconds > 0:
            let milliseconds = Int(seconds * 1_000)
            callbackQueue.asyncAfter(deadline: .now() + .milliseconds(milliseconds)) { [weak self] in
                self?.disconnectStream(nil)
            }
            fallthrough
        case .none:
            writeError(closeCode)
        default:
            disconnectStream(nil)
            break
        }
    }",0,,
"open func write(string: String, completion: (() -> ())? = nil) {
        guard isConnected else { return }
        dequeueWrite(string.data(using: String.Encoding.utf8)!, code: .textFrame, writeCompletion: completion)
    }",0,,
"    open func write(data: Data, completion: (() -> ())? = nil) {
        guard isConnected else { return }
        dequeueWrite(data, code: .binaryFrame, writeCompletion: completion)
    }",0,,
"    open func write(ping: Data, completion: (() -> ())? = nil) {
        guard isConnected else { return }
        dequeueWrite(ping, code: .ping, writeCompletion: completion)
    }",0,,
"    private func addHeader(_ urlRequest: CFHTTPMessage, key: String, val: String) {
        CFHTTPMessageSetHeaderFieldValue(urlRequest, key as CFString, val as CFString)
    }",0,,
"private func generateWebSocketKey() -> String {
        var key = """"
        let seed = 16
        for _ in 0..<seed {
            let uni = UnicodeScalar(UInt32(97 + arc4random_uniform(25)))
            key += ""\(Character(uni!))""
        }
        let data = key.data(using: String.Encoding.utf8)
        let baseKey = data?.base64EncodedString(options: NSData.Base64EncodingOptions(rawValue: 0))
        return baseKey!
    }",0,,
"    private func disconnectStream(_ error: NSError?, runDelegate: Bool = true) {
        if error == nil {
            writeQueue.waitUntilAllOperationsAreFinished()
        } else {
            writeQueue.cancelAllOperations()
        }
        cleanupStream()
        connected = false
        if runDelegate {
            doDisconnect(error)
        }
    }",0,,
"    private func cleanupStream() {
        outputStream?.delegate = nil
        inputStream?.delegate = nil
        if let stream = inputStream {
            CFReadStreamSetDispatchQueue(stream, nil)
            stream.close()
        }
        if let stream = outputStream {
            CFWriteStreamSetDispatchQueue(stream, nil)
            stream.close()
        }
        outputStream = nil
        inputStream = nil
        fragBuffer = nil
    }",0,,
"private func processInputStream() {
        let buf = NSMutableData(capacity: BUFFER_MAX)
        let buffer = UnsafeMutableRawPointer(mutating: buf!.bytes).assumingMemoryBound(to: UInt8.self)
        let length = inputStream!.read(buffer, maxLength: BUFFER_MAX)
        guard length > 0 else { return }
        var process = false
        if inputQueue.count == 0 {
            process = true
        }
        inputQueue.append(Data(bytes: buffer, count: length))
        if process {
            dequeueInput()
        }
    }",0,,
"private func dequeueInput() {
        while !inputQueue.isEmpty {
            autoreleasepool {
                let data = inputQueue[0]
                var work = data
                if let buffer = fragBuffer {
                    var combine = NSData(data: buffer) as Data
                    combine.append(data)
                    work = combine
                    fragBuffer = nil
                }
                let buffer = UnsafeRawPointer((work as NSData).bytes).assumingMemoryBound(to: UInt8.self)
                let length = work.count
                if !connected {
                    processTCPHandshake(buffer, bufferLen: length)
                } else {
                    processRawMessagesInBuffer(buffer, bufferLen: length)
                }
                inputQueue = inputQueue.filter{ $0 != data }
            }
        }
    }",0,,
"private func processTCPHandshake(_ buffer: UnsafePointer<UInt8>, bufferLen: Int) {
        let code = processHTTP(buffer, bufferLen: bufferLen)
        switch code {
        case 0:
            break
        case -1:
            fragBuffer = Data(bytes: buffer, count: bufferLen)
            break 
        default:
            doDisconnect(errorWithDetail(""Invalid HTTP upgrade"", code: UInt16(code)))
        }
    }",0,,
"private func processHTTP(_ buffer: UnsafePointer<UInt8>, bufferLen: Int) -> Int {
        let CRLFBytes = [UInt8(ascii: ""\r""), UInt8(ascii: ""\n""), UInt8(ascii: ""\r""), UInt8(ascii: ""\n"")]
        var k = 0
        var totalSize = 0
        for i in 0..<bufferLen {
            if buffer[i] == CRLFBytes[k] {
                k += 1
                if k == 3 {
                    totalSize = i + 1
                    break
                }
            } else {
                k = 0
            }
        }
        if totalSize > 0 {
            let code = validateResponse(buffer, bufferLen: totalSize)
            if code != 0 {
                return code
            }
            isConnecting = false
            connected = true
            didDisconnect = false
            if canDispatch {
                callbackQueue.async { [weak self] in
                    guard let s = self else { return }
                    s.onConnect?()
                    s.delegate?.websocketDidConnect(socket: s)
                    s.notificationCenter.post(name: NSNotification.Name(WebsocketDidConnectNotification), object: self)
                }
            }
            totalSize += 1 
            let restSize = bufferLen - totalSize
            if restSize > 0 {
                processRawMessagesInBuffer(buffer + totalSize, bufferLen: restSize)
            }
            return 0 
        }
        return -1 
    }",0,,
"private func validateResponse(_ buffer: UnsafePointer<UInt8>, bufferLen: Int) -> Int {
        let response = CFHTTPMessageCreateEmpty(kCFAllocatorDefault, false).takeRetainedValue()
        CFHTTPMessageAppendBytes(response, buffer, bufferLen)
        let code = CFHTTPMessageGetResponseStatusCode(response)
        if code != httpSwitchProtocolCode {
            return code
        }
        if let cfHeaders = CFHTTPMessageCopyAllHeaderFields(response) {
            let headers = cfHeaders.takeRetainedValue() as NSDictionary
            if let acceptKey = headers[headerWSAcceptName as NSString] as? NSString {
                if acceptKey.length > 0 {
                    return 0
                }
            }
        }
        return -1
    }",0,,
"private static func readUint16(_ buffer: UnsafePointer<UInt8>, offset: Int) -> UInt16 {
        return (UInt16(buffer[offset + 0]) << 8) | UInt16(buffer[offset + 1])
    }",0,,
"private static func readUint64(_ buffer: UnsafePointer<UInt8>, offset: Int) -> UInt64 {
        var value = UInt64(0)
        for i in 0...7 {
            value = (value << 8) | UInt64(buffer[offset + i])
        }
        return value
    }",0,,
"private static func writeUint16(_ buffer: UnsafeMutablePointer<UInt8>, offset: Int, value: UInt16) {
        buffer[offset + 0] = UInt8(value >> 8)
        buffer[offset + 1] = UInt8(value & 0xff)
    }",0,,
"private static func writeUint64(_ buffer: UnsafeMutablePointer<UInt8>, offset: Int, value: UInt64) {
        for i in 0...7 {
            buffer[offset + i] = UInt8((value >> (8*UInt64(7 - i))) & 0xff)
        }
    }",0,,
"private func processOneRawMessage(inBuffer buffer: UnsafeBufferPointer<UInt8>) -> UnsafeBufferPointer<UInt8> {
        let response = readStack.last
        guard let baseAddress = buffer.baseAddress else {return emptyBuffer}
        let bufferLen = buffer.count
        if response != nil && bufferLen < 2 {
            fragBuffer = Data(buffer: buffer)
            return emptyBuffer
        }
        if let response = response, response.bytesLeft > 0 {
            var len = response.bytesLeft
            var extra = bufferLen - response.bytesLeft
            if response.bytesLeft > bufferLen {
                len = bufferLen
                extra = 0
            }
            response.bytesLeft -= len
            response.buffer?.append(Data(bytes: baseAddress, count: len))
            _ = processResponse(response)
            return buffer.fromOffset(bufferLen - extra)
        } else {
            let isFin = (FinMask & baseAddress[0])
            let receivedOpcode = OpCode(rawValue: (OpCodeMask & baseAddress[0]))
            let isMasked = (MaskMask & baseAddress[1])
            let payloadLen = (PayloadLenMask & baseAddress[1])
            var offset = 2
            if (isMasked > 0 || (RSVMask & baseAddress[0]) > 0) && receivedOpcode != .pong {
                let errCode = CloseCode.protocolError.rawValue
                doDisconnect(errorWithDetail(""masked and rsv data is not currently supported"", code: errCode))
                writeError(errCode)
                return emptyBuffer
            }
            let isControlFrame = (receivedOpcode == .connectionClose || receivedOpcode == .ping)
            if !isControlFrame && (receivedOpcode != .binaryFrame && receivedOpcode != .continueFrame &&
                receivedOpcode != .textFrame && receivedOpcode != .pong) {
                    let errCode = CloseCode.protocolError.rawValue
                    doDisconnect(errorWithDetail(""unknown opcode: \(receivedOpcode)"", code: errCode))
                    writeError(errCode)
                    return emptyBuffer
            }
            if isControlFrame && isFin == 0 {
                let errCode = CloseCode.protocolError.rawValue
                doDisconnect(errorWithDetail(""control frames can't be fragmented"", code: errCode))
                writeError(errCode)
                return emptyBuffer
            }
            var closeCode = CloseCode.normal.rawValue
            if receivedOpcode == .connectionClose {
                if payloadLen == 1 {
                    closeCode = CloseCode.protocolError.rawValue
                } else if payloadLen > 1 {
                    closeCode = WebSocket.readUint16(baseAddress, offset: offset)
                    if closeCode < 1000 || (closeCode > 1003 && closeCode < 1007) || (closeCode > 1011 && closeCode < 3000) {
                        closeCode = CloseCode.protocolError.rawValue
                    }
                }
                if payloadLen < 2 {
                    doDisconnect(errorWithDetail(""connection closed by server"", code: closeCode))
                    writeError(closeCode)
                    return emptyBuffer
                }
            } else if isControlFrame && payloadLen > 125 {
                writeError(CloseCode.protocolError.rawValue)
                return emptyBuffer
            }
            var dataLength = UInt64(payloadLen)
            if dataLength == 127 {
                dataLength = WebSocket.readUint64(baseAddress, offset: offset)
                offset += MemoryLayout<UInt64>.size
            } else if dataLength == 126 {
                dataLength = UInt64(WebSocket.readUint16(baseAddress, offset: offset))
                offset += MemoryLayout<UInt16>.size
            }
            if bufferLen < offset || UInt64(bufferLen - offset) < dataLength {
                fragBuffer = Data(bytes: baseAddress, count: bufferLen)
                return emptyBuffer
            }
            var len = dataLength
            if dataLength > UInt64(bufferLen) {
                len = UInt64(bufferLen-offset)
            }
            let data: Data
            if len < 0 {
                len = 0
                data = Data()
            } else {
                if receivedOpcode == .connectionClose && len > 0 {
                    let size = MemoryLayout<UInt16>.size
                    offset += size
                    len -= UInt64(size)
                }
                data = Data(bytes: baseAddress+offset, count: Int(len))
            }
            if receivedOpcode == .connectionClose {
                var closeReason = ""connection closed by server""
                if let customCloseReason = String(data: data, encoding: .utf8) {
                    closeReason = customCloseReason
                } else {
                    closeCode = CloseCode.protocolError.rawValue
                }
                doDisconnect(errorWithDetail(closeReason, code: closeCode))
                writeError(closeCode)
                return emptyBuffer
            }
            if receivedOpcode == .pong {
                if canDispatch {
                    callbackQueue.async { [weak self] in
                        guard let s = self else { return }
                        let pongData: Data? = data.count > 0 ? data : nil
                        s.onPong?(pongData)
                        s.pongDelegate?.websocketDidReceivePong(socket: s, data: pongData)
                    }
                }
                return buffer.fromOffset(offset + Int(len))
            }
            var response = readStack.last
            if isControlFrame {
                response = nil 
            }
            if isFin == 0 && receivedOpcode == .continueFrame && response == nil {
                let errCode = CloseCode.protocolError.rawValue
                doDisconnect(errorWithDetail(""continue frame before a binary or text frame"", code: errCode))
                writeError(errCode)
                return emptyBuffer
            }
            var isNew = false
            if response == nil {
                if receivedOpcode == .continueFrame {
                    let errCode = CloseCode.protocolError.rawValue
                    doDisconnect(errorWithDetail(""first frame can't be a continue frame"",
                        code: errCode))
                    writeError(errCode)
                    return emptyBuffer
                }
                isNew = true
                response = WSResponse()
                response!.code = receivedOpcode!
                response!.bytesLeft = Int(dataLength)
                response!.buffer = NSMutableData(data: data)
            } else {
                if receivedOpcode == .continueFrame {
                    response!.bytesLeft = Int(dataLength)
                } else {
                    let errCode = CloseCode.protocolError.rawValue
                    doDisconnect(errorWithDetail(""second and beyond of fragment message must be a continue frame"",
                        code: errCode))
                    writeError(errCode)
                    return emptyBuffer
                }
                response!.buffer!.append(data)
            }
            if let response = response {
                response.bytesLeft -= Int(len)
                response.frameCount += 1
                response.isFin = isFin > 0 ? true : false
                if isNew {
                    readStack.append(response)
                }
                _ = processResponse(response)
            }

            let step = Int(offset + numericCast(len))
            return buffer.fromOffset(step)
        }
    }",0,,
"private func processRawMessagesInBuffer(_ pointer: UnsafePointer<UInt8>, bufferLen: Int) {
        var buffer = UnsafeBufferPointer(start: pointer, count: bufferLen)
        repeat {
            buffer = processOneRawMessage(inBuffer: buffer)
        } while buffer.count >= 2
        if buffer.count > 0 {
            fragBuffer = Data(buffer: buffer)
        }
    }",0,,
"private func processResponse(_ response: WSResponse) -> Bool {
        if response.isFin && response.bytesLeft <= 0 {
            if response.code == .ping {
                let data = response.buffer! 
                dequeueWrite(data as Data, code: .pong)
            } else if response.code == .textFrame {
                let str: NSString? = NSString(data: response.buffer! as Data, encoding: String.Encoding.utf8.rawValue)
                if str == nil {
                    writeError(CloseCode.encoding.rawValue)
                    return false
                }
                if canDispatch {
                    callbackQueue.async { [weak self] in
                        guard let s = self else { return }
                        s.onText?(str! as String)
                        s.delegate?.websocketDidReceiveMessage(socket: s, text: str! as String)
                    }
                }
            } else if response.code == .binaryFrame {
                if canDispatch {
                    let data = response.buffer! 
                    callbackQueue.async { [weak self] in
                        guard let s = self else { return }
                        s.onData?(data as Data)
                        s.delegate?.websocketDidReceiveData(socket: s, data: data as Data)
                    }
                }
            }
            readStack.removeLast()
            return true
        }
        return false
    }",0,,
"private func errorWithDetail(_ detail: String, code: UInt16) -> NSError {
        var details = [String: String]()
        details[NSLocalizedDescriptionKey] =  detail
        return NSError(domain: WebSocket.ErrorDomain, code: Int(code), userInfo: details)
    }",0,,
"private func writeError(_ code: UInt16) {
        let buf = NSMutableData(capacity: MemoryLayout<UInt16>.size)
        let buffer = UnsafeMutableRawPointer(mutating: buf!.bytes).assumingMemoryBound(to: UInt8.self)
        WebSocket.writeUint16(buffer, offset: 0, value: code)
        dequeueWrite(Data(bytes: buffer, count: MemoryLayout<UInt16>.size), code: .connectionClose)
    }",0,,
"private func dequeueWrite(_ data: Data, code: OpCode, writeCompletion: (() -> ())? = nil) {
        let operation = BlockOperation()
        operation.addExecutionBlock { [weak self, weak operation] in
            
            guard let s = self else { return }
            guard let sOperation = operation else { return }
            var offset = 2
            let dataLength = data.count
            let frame = NSMutableData(capacity: dataLength + s.MaxFrameSize)
            let buffer = UnsafeMutableRawPointer(frame!.mutableBytes).assumingMemoryBound(to: UInt8.self)
            buffer[0] = s.FinMask | code.rawValue
            if dataLength < 126 {
                buffer[1] = CUnsignedChar(dataLength)
            } else if dataLength <= Int(UInt16.max) {
                buffer[1] = 126
                WebSocket.writeUint16(buffer, offset: offset, value: UInt16(dataLength))
                offset += MemoryLayout<UInt16>.size
            } else {
                buffer[1] = 127
                WebSocket.writeUint64(buffer, offset: offset, value: UInt64(dataLength))
                offset += MemoryLayout<UInt64>.size
            }
            buffer[1] |= s.MaskMask
            let maskKey = UnsafeMutablePointer<UInt8>(buffer + offset)
            _ = SecRandomCopyBytes(kSecRandomDefault, Int(MemoryLayout<UInt32>.size), maskKey)
            offset += MemoryLayout<UInt32>.size
            
            for i in 0..<dataLength {
                buffer[offset] = data[i] ^ maskKey[i % MemoryLayout<UInt32>.size]
                offset += 1
            }
            var total = 0
            while !sOperation.isCancelled {
                guard let outStream = s.outputStream else { break }
                let writeBuffer = UnsafeRawPointer(frame!.bytes+total).assumingMemoryBound(to: UInt8.self)
                let len = outStream.write(writeBuffer, maxLength: offset-total)
                if len < 0 {
                    var error: Error?
                    if let streamError = outStream.streamError {
                        error = streamError
                    } else {
                        let errCode = InternalErrorCode.outputStreamWriteError.rawValue
                        error = s.errorWithDetail(""output stream error during write"", code: errCode)
                    }
                    s.doDisconnect(error as NSError?)
                    break
                } else {
                    total += len
                }
                if total >= offset {
                    if let queue = self?.callbackQueue, let callback = writeCompletion {
                        queue.async {
                            callback()
                        }
                    }

                    break
                }
            }
        }
        writeQueue.addOperation(operation)
    }",0,,
"private func doDisconnect(_ error: NSError?) {
        guard !didDisconnect else { return }
        didDisconnect = true
        isConnecting = false
        connected = false
        guard canDispatch else {return}
        callbackQueue.async { [weak self] in
            guard let s = self else { return }
            s.onDisconnect?(error)
            s.delegate?.websocketDidDisconnect(socket: s, error: error)
            let userInfo = error.map{ [WebsocketDisconnectionErrorKeyName: $0] }
            s.notificationCenter.post(name: NSNotification.Name(WebsocketDidDisconnectNotification), object: self, userInfo: userInfo)
        }
    }",0,,
"    func fromOffset(_ offset: Int) -> UnsafeBufferPointer<Element> {
        return UnsafeBufferPointer<Element>(start: baseAddress?.advanced(by: offset), count: count - offset)
    }",0,,
"        self.init(bytes: buffer.baseAddress!, count: buffer.count)
    }

}

private extension UnsafeBufferPointer {

    func fromOffset(_ offset: Int) -> UnsafeBufferPointer<Element> {
        return UnsafeBufferPointer<Element>(start: baseAddress?.advanced(by: offset), count: count - offset)
    }
    
}",0,,
"internal func sign(digest: ByteBuffer) throws -> ByteBuffer {
        let bio = BIO_new(BIO_s_mem())
        defer { BIO_free(bio) }
        let res = buffer.withUnsafeReadableBytes { ptr in
            Int(BIO_puts(bio, ptr.baseAddress?.assumingMemoryBound(to: Int8.self)))
        }
        assert(res >= 0, ""BIO_puts failed"")

        guard let opaquePointer = OpaquePointer.make(optional: PEM_read_bio_ECPrivateKey(bio!, nil, nil, nil)) else {
            throw APNSwiftError.SigningError.invalidAuthKey
        }
        defer { EC_KEY_free(opaquePointer) }
        
        let sig = digest.withUnsafeReadableBytes { ptr in
            ECDSA_do_sign(ptr.baseAddress?.assumingMemoryBound(to: UInt8.self), Int32(digest.readableBytes), opaquePointer)
        }
        defer { ECDSA_SIG_free(sig) }

        var derEncodedSignature: UnsafeMutablePointer<UInt8>?
        let derLength = i2d_ECDSA_SIG(sig, &derEncodedSignature)
        guard let derCopy = derEncodedSignature, derLength > 0 else {
            throw APNSwiftError.SigningError.invalidASN1
        }

        var derBytes = ByteBufferAllocator().buffer(capacity: Int(derLength))
        for b in 0 ..< Int(derLength) {
            derBytes.writeBytes([derCopy[b]])
        }

        return derBytes
    }",1,"4,6,18,25,26,27,28","Int(BIO_puts(bio, ptr.baseAddress?.assumingMemoryBound(to: Int8.self)))/~/        assert(res >= 0, ""BIO_puts failed"")/~/        var derEncodedSignature: UnsafeMutablePointer<UInt8>?/~/        for b in 0 ..< Int(derLength) {/~/            derBytes.writeBytes([derCopy[b]])/~/        }/~/"
"    public init(buffer: ByteBuffer) throws {
        self.buffer = buffer
    }",0,,
"    public init(filePath: String) throws {
        guard let data = try? Data(contentsOf: URL(fileURLWithPath: filePath)) else {
            throw APNSwiftError.SigningError.certificateFileDoesNotExist
        }
        var mutableByteBuffer = ByteBufferAllocator().buffer(capacity: data.count)
        mutableByteBuffer.writeBytes(data)
        self.buffer = mutableByteBuffer
    }",0,,
"    public func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {
        
        var path = request.url.path

        
        while path.hasPrefix(""/"") {
            path = String(path.dropFirst())
        }

        
        guard !path.contains(""../"") else {
            return request.eventLoop.makeFailedFuture(Abort(.forbidden))
        }

        
        let filePath = self.publicDirectory + (path.removingPercentEncoding ?? path)

        
        var isDir: ObjCBool = false
        guard FileManager.default.fileExists(atPath: filePath, isDirectory: &isDir), !isDir.boolValue else {
            return next.respond(to: request)
        }

        
        let res = request.fileio.streamFile(at: filePath)
        return request.eventLoop.makeSucceededFuture(res)
    }",1,"1,2,15",        // make a copy of the path/~/        var path = request.url.path/~/        let filePath = self.publicDirectory + (path.removingPercentEncoding ?? path)
"    public init(publicDirectory: String) {
        self.publicDirectory = publicDirectory.hasSuffix(""/"") ? publicDirectory : publicDirectory + ""/""
    }",0,,
"private func updateMetrics(
        for request: Request,
        path: String,
        startTime: UInt64,
        statusCode: UInt
    ) {
        let counterDimensions = [
            (""method"", request.method.string),
            (""path"", path),
            (""status"", statusCode.description),
        ]
        Counter(label: ""http_requests_total"", dimensions: counterDimensions).increment()
        if statusCode >= 500 {
            Counter(label: ""http_request_errors_total"", dimensions: counterDimensions).increment()
        }
        Timer(
            label: ""http_request_duration_seconds"",
            dimensions: [
                (""method"", request.method.string),
                (""path"", path)
            ],
            preferredDisplayUnit: .seconds
        ).recordNanoseconds(DispatchTime.now().uptimeNanoseconds - startTime)
    }",1,"2,6,7,8,11,13,17,18,19,20","        path: String,/~/        let counterDimensions = [/~/            (""method"", request.method.string),/~/            (""path"", path),/~/        Counter(label: ""http_requests_total"", dimensions: counterDimensions).increment()/~/            Counter(label: ""http_request_errors_total"", dimensions: counterDimensions).increment()/~/            dimensions: [/~/                (""method"", request.method.string),/~/                (""path"", path)/~/            ],"
"    public func respond(to request: Request) -> EventLoopFuture<Response> {
        let startTime = DispatchTime.now().uptimeNanoseconds
        let response: EventLoopFuture<Response>
        let path: String
        if let cachedRoute = self.getRoute(for: request) {
            path = cachedRoute.route.description
            request.route = cachedRoute.route
            response = cachedRoute.responder.respond(to: request)
        } else {
            path = request.url.path
            response = self.notFoundResponder.respond(to: request)
        }
        return response.always { result in
            let status: HTTPStatus
            switch result {
            case .success(let response):
                status = response.status
            case .failure:
                status = .internalServerError
            }
            self.updateMetrics(
                for: request,
                path: path,
                startTime: startTime,
                statusCode: status.code
            )
        }
    }",1,"3,5,9,22","        let path: String/~/            path = cachedRoute.route.description/~/            path = request.url.path/~/                path: path,"
"    public init(routes: Routes, middleware: [Middleware] = []) {
        let options = routes.caseInsensitive ?
            Set(arrayLiteral: TrieRouter<CachedRoute>.ConfigurationOption.caseInsensitive) : []
        let router = TrieRouter(CachedRoute.self, options: options)
        
        for route in routes.all {
            
            let cached = CachedRoute(
                route: route,
                responder: middleware.makeResponder(chainingTo: route.responder)
            )
            
            let path = route.path.filter { component in
                switch component {
                case .constant(let string):
                    return string != """"
                default:
                    return true
                }
            }
            router.register(cached, at: [.constant(route.method.string)] + path)
        }
        self.router = router
        self.notFoundResponder = middleware.makeResponder(chainingTo: NotFoundResponder())
    }",0,,
"            .map(String.init)
        
        let method = (request.method == .HEAD) ? .GET : request.method
        return self.router.route(
            path: [method.string] + pathComponents,
            parameters: &request.parameters
        )
    }",0,,
"fileprivate func asByteBufferBounds(withMaxSize size: Int) -> (offset: Int64, byteCount: Int) {
        switch self {
            case .start(let value):
                return (offset: numericCast(value), byteCount: size - value)
            case .tail(let value):
                return (offset: numericCast(size - value), byteCount: value)
            case .within(let start, let end):
                return (offset: numericCast(start), byteCount: end - start + 1)
        }
    }",1,"0,7","fileprivate func asByteBufferBounds(withMaxSize size: Int) -> (offset: Int64, byteCount: Int) {/~/                return (offset: numericCast(start), byteCount: end - start + 1)"
"public func streamFile(
        at path: String,
        chunkSize: Int = NonBlockingFileIO.defaultChunkSize,
        mediaType: HTTPMediaType? = nil,
        onCompleted: @escaping (Result<Void, Error>) -> () = { _ in }
    ) -> Response {
        
        guard
            let attributes = try? FileManager.default.attributesOfItem(atPath: path),
            let modifiedAt = attributes[.modificationDate] as? Date,
            let fileSize = (attributes[.size] as? NSNumber)?.intValue
        else {
            return Response(status: .internalServerError)
        }

        let contentRange: HTTPHeaders.Range?
        if let rangeFromHeaders = request.headers.range {
            if rangeFromHeaders.unit == .bytes && rangeFromHeaders.ranges.count == 1 {
                contentRange = rangeFromHeaders
            } else {
                contentRange = nil
            }
        } else {
            contentRange = nil
        }
        
        var headers: HTTPHeaders = [:]

        
        let fileETag = ""\(modifiedAt.timeIntervalSince1970)-\(fileSize)""
        headers.replaceOrAdd(name: .eTag, value: fileETag)

        
        if fileETag == request.headers.first(name: .ifNoneMatch) {
            return Response(status: .notModified)
        }

        
        let response = Response(status: .ok, headers: headers)
        let offset: Int64
        let byteCount: Int
        if let contentRange = contentRange {
            response.status = .partialContent
            response.headers.add(name: .accept, value: contentRange.unit.serialize())
            if let firstRange = contentRange.ranges.first {
                let range = firstRange.asResponseContentRange(limit: fileSize)
                response.headers.contentRange = HTTPHeaders.ContentRange(unit: contentRange.unit, range: range)
                (offset, byteCount) = firstRange.asByteBufferBounds(withMaxSize: fileSize)
            } else {
                offset = 0
                byteCount = fileSize
            }
        } else {
            offset = 0
            byteCount = fileSize
        }
        
        
        if
            let fileExtension = path.components(separatedBy: ""."").last,
            let type = mediaType ?? HTTPMediaType.fileExtension(fileExtension)
        {
            response.headers.contentType = type
        }
        response.body = .init(stream: { stream in
            self.read(path: path, fromOffset: offset, byteCount: byteCount, chunkSize: chunkSize) { chunk in
                return stream.write(.buffer(chunk))
            }.whenComplete { result in
                switch result {
                case .failure(let error):
                    stream.write(.error(error), promise: nil)
                case .success:
                    stream.write(.end, promise: nil)
                }
                onCompleted(result)
            }
        }, count: byteCount, byteBufferAllocator: request.byteBufferAllocator)
        
        return response
    }

    
    
    private func read(
        path: String,
        fromOffset offset: Int64,
        byteCount: Int,
        chunkSize: Int,
        onRead: @escaping (ByteBuffer) -> EventLoopFuture<Void>
    ) -> EventLoopFuture<Void> {
        do {
            let fd = try NIOFileHandle(path: path)
            let done = self.io.readChunked(
                fileHandle: fd,
                fromOffset: offset,
                byteCount: byteCount,
                chunkSize: chunkSize,
                allocator: allocator,
                eventLoop: self.request.eventLoop
            ) { chunk in
                return onRead(chunk)
            }
            done.whenComplete { _ in
                try? fd.close()
            }
            return done
        } catch {
            return self.request.eventLoop.makeFailedFuture(error)
        }
    }
    
    
    
    
    
    
    
    
    
    
    public func writeFile(_ buffer: ByteBuffer, at path: String) -> EventLoopFuture<Void> {
        do {
            let fd = try NIOFileHandle(path: path, mode: .write, flags: .allowFileCreation())
            let done = io.write(fileHandle: fd, buffer: buffer, eventLoop: self.request.eventLoop)
            done.whenComplete { _ in
                try? fd.close()
            }
            return done
        } catch {
            return self.request.eventLoop.makeFailedFuture(error)
        }
    }
}",1,47,"                (offset, byteCount) = firstRange.asByteBufferBounds(withMaxSize: fileSize)"
"    internal init(io: NonBlockingFileIO, allocator: ByteBufferAllocator, request: Request) {
        self.io = io
        self.allocator = allocator
        self.request = request
    }",0,,
"public func collectFile(at path: String) -> EventLoopFuture<ByteBuffer> {
        var data = self.allocator.buffer(capacity: 0)
        return self.readFile(at: path) { new in
            var new = new
            data.writeBuffer(&new)
            return self.request.eventLoop.makeSucceededFuture(())
        }.map { data }
    }",0,,
"public func readFile(
        at path: String,
        chunkSize: Int = NonBlockingFileIO.defaultChunkSize,
        onRead: @escaping (ByteBuffer) -> EventLoopFuture<Void>
    ) -> EventLoopFuture<Void> {
        guard
            let attributes = try? FileManager.default.attributesOfItem(atPath: path),
            let fileSize = attributes[.size] as? NSNumber
        else {
            return self.request.eventLoop.makeFailedFuture(Abort(.internalServerError))
        }
        return self.read(
            path: path,
            fromOffset: 0,
            byteCount:
            fileSize.intValue,
            chunkSize: chunkSize,
            onRead: onRead
        )
    }",0,,
"response.body = .init(stream: { stream in
            self.read(path: path, fromOffset: offset, byteCount: byteCount, chunkSize: chunkSize) { chunk in
                return stream.write(.buffer(chunk))
            }.whenComplete { result in
                switch result {
                case .failure(let error):
                    stream.write(.error(error), promise: nil)
                case .success:
                    stream.write(.end, promise: nil)
                }
                onCompleted(result)
            }
        }, count: byteCount, byteBufferAllocator: request.byteBufferAllocator)
        
        return response
    }

    
    
    private func read(
        path: String,
        fromOffset offset: Int64,
        byteCount: Int,
        chunkSize: Int,
        onRead: @escaping (ByteBuffer) -> EventLoopFuture<Void>
    ) -> EventLoopFuture<Void> {
        do {
            let fd = try NIOFileHandle(path: path)
            let done = self.io.readChunked(
                fileHandle: fd,
                fromOffset: offset,
                byteCount: byteCount,
                chunkSize: chunkSize,
                allocator: allocator,
                eventLoop: self.request.eventLoop
            ) { chunk in
                return onRead(chunk)
            }
            done.whenComplete { _ in
                try? fd.close()
            }
            return done
        } catch {
            return self.request.eventLoop.makeFailedFuture(error)
        }
    }",0,,
"    public func writeFile(_ buffer: ByteBuffer, at path: String) -> EventLoopFuture<Void> {
        do {
            let fd = try NIOFileHandle(path: path, mode: .write, flags: .allowFileCreation())
            let done = io.write(fileHandle: fd, buffer: buffer, eventLoop: self.request.eventLoop)
            done.whenComplete { _ in
                try? fd.close()
            }
            return done
        } catch {
            return self.request.eventLoop.makeFailedFuture(error)
        }
    }",0,,
"    init(stringLiteral: String) {
        self = .urlDecoded(stringLiteral)
    }",0,,
"    func asUrlEncoded() throws -> String {
        switch self {
        case .urlEncoded(let encoded):
            return encoded
        case .urlDecoded(let decoded):
            return try decoded.urlEncoded()
        }
    }",0,,
"    func asUrlDecoded() throws -> String {
        switch self {
        case .urlEncoded(let encoded):
            guard let decoded = encoded.removingPercentEncoding else {
                throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: [], debugDescription: ""Unable to remove percent encoding for \(encoded)""))
            }
            return decoded
        case .urlDecoded(let decoded):
            return decoded
        }
    }",0,,
"    static func == (lhs: URLQueryFragment, rhs: URLQueryFragment) -> Bool {
        do {
            return try lhs.asUrlDecoded() == rhs.asUrlDecoded()
        } catch {
            return false
        }
    }",0,,
"    func hash(into: inout Hasher) {
        do {
            try self.asUrlDecoded().hash(into: &into)
        } catch {
            Logger(label: ""codes.vapor.url"").report(error: error)
        }
    }",0,,
"    init(values: [URLQueryFragment] = [], children: [String: URLEncodedFormData] = [:]) {
        self.values = values
        self.children = children
    }",0,,
"    init(stringLiteral: String) {
        self.values = [.urlDecoded(stringLiteral)]
        self.children = [:]
    }",0,,
"    init(arrayLiteral: String...) {
        self.values = arrayLiteral.map({ (s: String) -> URLQueryFragment in
            return .urlDecoded(s)
        })
        self.children = [:]
    }",0,,
"    init(dictionaryLiteral: (String, URLEncodedFormData)...) {
        self.values = []
        self.children = Dictionary(uniqueKeysWithValues: dictionaryLiteral)
    }",0,,
"result.set(value: .urlEncoded(value), forPath: [])
            case 2:
                let key = kv[0]
                let value = String(kv[1])
                result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)))
            default:
                
                continue
            }
        }
        return result
    }

    func parseKey(key: Substring) throws -> [String] {
        guard let percentDecodedKey = key.removingPercentEncoding else {
            throw URLEncodedFormError.malformedKey(key: key)
        }
        return try percentDecodedKey.split(separator: ""["").enumerated().map { (i, part) in 
            switch i {
            case 0:
                return String(part)
            default:
                guard part.last == ""]"" else {
                    throw URLEncodedFormError.malformedKey(key: key)
                }
                return String(part.dropLast())
            }
        }
    }",1,"0,4","                result.set(value: .urlEncoded(value), forPath: [])/~/                result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)))"
    init() { },0,,
"    override func didMoveToWindow() {
        super.didMoveToWindow()
        
        if window != nil {
            startCapture()
        }
    }",1,4,            startCapture()
"    deinit {
        stopCapture()
    }",0,,
"    override func setupViews() {
        super.setupViews()
        previewView.backgroundColor = .clear
        previewView.translatesAutoresizingMaskIntoConstraints = false
        insertSubview(previewView, belowSubview: userDetailsView)
    }",0,,
"    override func createConstraints() {
        super.createConstraints()
        previewView.fitInSuperview()
    }",0,,
"    override func updateUserDetails() {
        userDetailsView.microphoneIconStyle = MicrophoneIconStyle(state: stream.microphoneState,
                                                                  shouldPulse: stream.isParticipantActiveSpeaker)
        
        guard let name = stream.participantName else {
            return
        }
        userDetailsView.name = name + ""user_cell.title.you_suffix"".localized
    }",0,,
"    func startCapture() {
        previewView.startVideoCapture()
    }",0,,
"    func stopCapture() {
        previewView.stopVideoCapture()
    }",0,,
"    private func updateSelfPreview() {
        guard
            let selfStreamId = ZMUser.selfUser()?.selfStreamId,
            let selfStream = stream(with: selfStreamId)
        else {
            return
        }

        if let view = viewCache[selfStreamId] as? SelfVideoPreviewView {
            view.stream = selfStream
            view.shouldShowActiveSpeakerFrame = configuration.shouldShowActiveSpeakerFrame
        } else {
            viewCache[selfStreamId] = SelfVideoPreviewView(
                stream: selfStream,
                isCovered: isCovered,
                shouldShowActiveSpeakerFrame: configuration.shouldShowActiveSpeakerFrame
            )
        }
    }",1,"1,2,3,4","        guard/~/            let selfStreamId = ZMUser.selfUser()?.selfStreamId,/~/            let selfStream = stream(with: selfStreamId)/~/        else {"
"        didSet {
            guard !configuration.isEqual(toConfiguration: oldValue) else { return }
            updateState()
        }",0,,
"        didSet {
            guard isCovered != oldValue else { return }
            notifyVisibilityChanged()
            displayIndicatorViewsIfNeeded()
            animateNetworkConditionView()
        }",0,,
"        super.init(nibName: nil, bundle: nil)

        setupViews()
        createConstraints()
        updateState()
        displayIndicatorViewsIfNeeded()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError(""init(coder:) has not been implemented"")
    }",0,,
"    private func setupViews() {
        gridView.dataSource = self
        view.addSubview(gridView)

        addToSelf(thumbnailViewController)

        view.addSubview(networkConditionView)

        networkConditionView.accessibilityIdentifier = ""network-conditions-indicator""
    }",0,,
"private func createConstraints() {
        for subView in [gridView, thumbnailViewController.view] {
            subView?.translatesAutoresizingMaskIntoConstraints = false
            subView?.fitInSuperview()
        }

        constrain(view, networkConditionView) { view, networkConditionView in
            networkConditionView.centerX == view.centerX
            networkConditionView.top == view.safeAreaLayoutGuideOrFallback.top + 24
        }
    }",0,,
"    public func handleDoubleTap(gesture: UIGestureRecognizer) {
        let location = gesture.location(in: gridView)
        toggleMaximized(view: streamView(at: location))
    }",0,,
"    private func toggleMaximized(view: BaseVideoPreviewView?) {
        let stream = view?.stream
        
        maximizedView = isMaximized(stream: stream) ? nil : view
        view?.isMaximized = isMaximized(stream: stream)
        updateVideoGrid(with: videoStreams)
    }",0,,
"    private func isMaximized(stream: Stream?) -> Bool {
        guard
            let streamId = stream?.streamId,
            let maximizedStreamId = maximizedView?.stream.streamId
        else { return false }
        
        return streamId == maximizedStreamId
    }",0,,
"    private func displayIndicatorViewsIfNeeded() {
        networkConditionView.networkQuality = configuration.networkQuality
        networkConditionView.isHidden = shouldHideNetworkCondition
    }",0,,
"    private func notifyVisibilityChanged() {
        NotificationCenter.default.post(
            name: .videoGridVisibilityChanged,
            object: nil,
            userInfo: [VideoGridViewController.isCoveredKey: isCovered]
        )
    }",0,,
"private func animateNetworkConditionView() {
        UIView.animate(
            withDuration: 0.2,
            delay: 0,
            options: [.curveEaseInOut, .beginFromCurrentState],
            animations: { self.networkConditionView.alpha = self.isCovered ? 0.0 : 1.0 }
        )
    }",0,,
"    private func updateState() {
        Log.calling.debug(""\nUpdating video configuration from:\n\(videoConfigurationDescription())"")

        updateSelfPreview()
        updateFloatingVideo(with: configuration.floatingVideoStream)
        updateVideoGrid(with: videoStreams)
        displayIndicatorViewsIfNeeded()
        updateGridViewAxis()

        Log.calling.debug(""\nUpdated video configuration to:\n\(videoConfigurationDescription())"")
    }",0,,
"    private func updateFloatingVideo(with state: VideoStream?) {
        
        guard let state = state else {
            Log.calling.debug(""Removing self video from floating preview"")
            return thumbnailViewController.removeCurrentThumbnailContentView()
        }

        
        guard state.stream.streamId == ZMUser.selfUser()?.selfStreamId else {
            return Log.calling.error(""Invalid operation: Non self preview in overlay"")
        }

        
        if nil == thumbnailViewController.contentView, let previewView = selfPreviewView {
            Log.calling.debug(""Adding self video to floating preview"")
            thumbnailViewController.setThumbnailContentView(previewView, contentSize: .previewSize(for: traitCollection))
        }
    }",0,,
"private func updateVideoGrid(with newVideoStreams: [VideoStream]) {
        let changeSet = StagedChangeset(source: dataSource, target: newVideoStreams)

        UIView.performWithoutAnimation {
            gridView.reload(using: changeSet) { dataSource = $0 }
        }

        updateStates(with: dataSource)
        pruneCache()
    }",0,,
"private func updateStates(with videoStreams: [VideoStream]) {
        videoStreams.forEach {
            let view = (streamView(for: $0.stream) as? BaseVideoPreviewView)
            view?.stream = $0.stream
            view?.shouldShowActiveSpeakerFrame = configuration.shouldShowActiveSpeakerFrame
            (view as? VideoPreviewView)?.isPaused = $0.isPaused
        }
    }",0,,
"    private func pruneCache() {
        let existingStreamsIds = Set(viewCache.keys)
        let currentStreamsIds = configuration.allStreamIds

        for deletedStreamId in existingStreamsIds.subtracting(currentStreamsIds) {
            viewCache[deletedStreamId]?.removeFromSuperview()
            viewCache.removeValue(forKey: deletedStreamId)
        }
    }",0,,
"    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        guard traitCollection.horizontalSizeClass != previousTraitCollection?.horizontalSizeClass else { return }
        thumbnailViewController.updateThumbnailContentSize(.previewSize(for: traitCollection), animated: false)
        updateGridViewAxis()
    }",0,,
"    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        coordinator.animate(alongsideTransition: { [updateGridViewAxis] _ in updateGridViewAxis() })
    }",0,,
"    private func updateGridViewAxis() {
        let newAxis = gridAxis(for: traitCollection)
        guard newAxis != gridView.layoutDirection else { return }
        gridView.layoutDirection = newAxis
    }",0,,
"    private func gridAxis(for traitCollection: UITraitCollection) -> UICollectionView.ScrollDirection {
        let isLandscape = UIApplication.shared.statusBarOrientation.isLandscape
        switch (traitCollection.userInterfaceIdiom, traitCollection.horizontalSizeClass, isLandscape) {
        case (.pad, .regular, true):
            return .horizontal
        default:
            return .vertical
        }
    }",0,,
"    private func streamView(for stream: Stream) -> UIView? {
        return viewCache[stream.streamId]
    }",0,,
"    private func streamView(at location: CGPoint) -> BaseVideoPreviewView? {
        guard let indexPath = gridView.indexPathForItem(at: location) else {
            return nil
        }
        return streamView(for: dataSource[indexPath.row].stream) as? BaseVideoPreviewView
    }",0,,
"private func stream(with streamId: AVSClient) -> Stream? {
        var stream = configuration.videoStreams.first(where: { $0.stream.streamId == streamId })?.stream

        if stream == nil && configuration.floatingVideoStream?.stream.streamId == streamId {
            stream = configuration.floatingVideoStream?.stream
        }

        return stream
    }",0,,
"    private func videoConfigurationDescription() -> String {
        return """"""
        showing self preview: \(selfPreviewView != nil)
        videos in grid: [\(dataSource)]\n
        """"""
    }",0,,
"func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }",0,,
"    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataSource.count
    }",0,,
"    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: GridCell.reuseIdentifier, for: indexPath) as? GridCell else {
            return UICollectionViewCell()
        }

        let videoStream = dataSource[indexPath.row]
        cell.add(streamView: streamView(for: videoStream))

        return cell
    }",0,,
"    private func streamView(for videoStream: VideoStream) -> OrientableView {
        let streamId = videoStream.stream.streamId

        if let streamView = viewCache[streamId] {
            return streamView
        } else {
            let view = VideoPreviewView(stream: videoStream.stream, isCovered: isCovered, shouldShowActiveSpeakerFrame: configuration.shouldShowActiveSpeakerFrame)
            viewCache[streamId] = view
            return view
        }
    }",0,,
"    static func previewSize(for traitCollection: UITraitCollection) -> CGSize {
        switch traitCollection.horizontalSizeClass {
        case .regular:
            return .floatingPreviewLarge
        case .compact, .unspecified:
            return .floatingPreviewSmall
        @unknown default:
            return .floatingPreviewSmall
        }
    }",0,,
"internal static func existingConversation(_ p1: Int, _ p2: Int) -> String {
            return L10n.tr(""Localizable"", ""add_participants.alert.message.existing_conversation"", p1, p2)
          }",0,,
"internal static func newConversation(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""add_participants.alert.message.new_conversation"", p1)
          }",0,,
"internal static func incoming(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""call.announcement.incoming"", String(describing: p1))
        }",0,,
"internal static func user(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""call.degraded.alert.message.user"", String(describing: p1))
            }",0,,
"internal static func user(_ p1: Any) -> String {
                return L10n.tr(""Localizable"", ""call.degraded.ended.alert.message.user"", String(describing: p1))
              }",0,,
"internal static func showAll(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""call.participants.show_all"", String(describing: p1))
        }",0,,
"internal static func user(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""call.status.incoming.user"", String(describing: p1))
          }",0,,
"internal static func user(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""call.status.outgoing.user"", String(describing: p1))
          }",0,,
"internal static func button(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""collections.section.all.button"", p1)
          }",0,,
"internal static func title(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""connection_request.title"", String(describing: p1))
      }",0,,
"internal static func nameInContacts(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""contacts_ui.name_in_contacts"", String(describing: p1))
      }",0,,
"internal static func tooBig(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.file.too_big"", String(describing: p1))
        }",0,,
"internal static func message(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.message.open_link_alert.message"", String(describing: p1))
          }",0,,
"internal static func date(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.message.reply.original_timestamp.date"", String(describing: p1))
            }",0,,
"internal static func time(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.message.reply.original_timestamp.time"", String(describing: p1))
            }",0,,
"internal static func text(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.ping.text"", String(describing: p1))
        }",0,,
"internal static func textYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.ping.text-you"", String(describing: p1))
        }",0,,
"internal static func connectedTo(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.connected_to"", String(describing: p1))
        }",0,,
"internal static func connectingTo(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.connecting_to"", String(describing: p1))
        }",0,,
"internal static func continuedConversation(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.continued_conversation"", String(describing: p1))
        }",0,,
"internal static func deletedMessagePrefixTimestamp(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.deleted_message_prefix_timestamp"", String(describing: p1))
        }",0,,
"internal static func editedMessagePrefixTimestamp(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.edited_message_prefix_timestamp"", String(describing: p1))
        }",0,,
"internal static func ephemeralTimeRemaining(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.ephemeral_time_remaining"", String(describing: p1))
        }",0,,
"internal static func messageReadReceiptOff(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_read_receipt_off"", String(describing: p1))
        }",0,,
"internal static func messageReadReceiptOffYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_read_receipt_off-you"", String(describing: p1))
        }",0,,
"internal static func messageReadReceiptOn(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_read_receipt_on"", String(describing: p1))
        }",0,,
"internal static func messageReadReceiptOnYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_read_receipt_on-you"", String(describing: p1))
        }",0,,
"internal static func messageTimerChanges(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_timer_changes"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func messageTimerChangesYou(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_timer_changes-you"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func messageTimerOff(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_timer_off"", String(describing: p1))
        }",0,,
"internal static func messageTimerOffYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.message_timer_off-you"", String(describing: p1))
        }",0,,
"internal static func newDevices(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""content.system.new_devices"", p1)
        }",0,,
"internal static func otherAddedParticipant(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_added_participant"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func otherAddedYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_added_you"", String(describing: p1))
        }",0,,
"internal static func otherLeft(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_left"", String(describing: p1))
        }",0,,
"internal static func otherRemovedOther(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_removed_other"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func otherRemovedYou(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_removed_you"", String(describing: p1))
        }",0,,
"internal static func otherRenamedConvToNothing(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_renamed_conv_to_nothing"", String(describing: p1))
        }",0,,
"internal static func otherStartedConversation(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_started_conversation"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func otherWantedToTalk(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.other_wanted_to_talk"", String(describing: p1))
        }",0,,
"internal static func participants1Other(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.participants_1_other"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func participantsNOthers(_ p1: Any, _ p2: Int) -> String {
          return L10n.tr(""Localizable"", ""content.system.participants_n_others"", String(describing: p1), p2)
        }",0,,
"internal static func peopleStartedUsing(_ p1: Any, _ p2: Int, _ p3: Int) -> String {
          return L10n.tr(""Localizable"", ""content.system.people_started_using"", String(describing: p1), p2, p3)
        }",0,,
"internal static func reactivatedDevice(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.reactivated_device"", String(describing: p1))
        }",0,,
"internal static func selfUserNewClient(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.self_user_new_client"", String(describing: p1))
        }",0,,
"internal static func selfUserNewSelfClient(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.self_user_new_self_client"", String(describing: p1))
        }",0,,
"internal static func unverifiedOtherDevices(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.unverified_other_devices"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func unverifiedSelfDevices(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.unverified_self_devices"", String(describing: p1))
        }",0,,
"internal static func youAddedParticipant(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.you_added_participant"", String(describing: p1))
        }",0,,
"internal static func youRemovedOther(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.you_removed_other"", String(describing: p1))
        }",0,,
"internal static func youStartedConversation(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""content.system.you_started_conversation"", String(describing: p1))
        }",0,,
"internal static func called(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.call.called"", String(describing: p1))
          }",0,,
"internal static func calledYou(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.call.called-you"", String(describing: p1))
          }",0,,
"internal static func missedCall(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""content.system.call.missed-call"", p1)
          }",0,,
"internal static func groups(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""content.system.call.missed-call.groups"", p1)
            }",0,,
"internal static func groupsYou(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""content.system.call.missed-call.groups-you"", p1)
            }",0,,
"internal static func errorDetails(_ p1: Int, _ p2: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.cannot_decrypt.error_details"", p1, String(describing: p2))
          }",0,,
"internal static func other(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.cannot_decrypt.other"", String(describing: p1))
          }",0,,
"internal static func other(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.cannot_decrypt_identity_changed.other"", String(describing: p1))
          }",0,,
"internal static func other(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.cannot_decrypt_resolved.other"", String(describing: p1))
          }",0,,
"internal static func joined(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.guest.joined"", String(describing: p1))
            }",0,,
"internal static func added(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.other.added"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func `left`(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.other.left"", String(describing: p1))
            }",0,,
"internal static func removed(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.other.removed"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func started(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.other.started"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func memberLeave(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.team.member-leave"", String(describing: p1))
            }",0,,
"internal static func title(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.with_name.title"", String(describing: p1))
            }",0,,
"internal static func titleYou(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.with_name.title-you"", String(describing: p1))
            }",0,,
"internal static func added(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.you.added"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func `left`(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.you.left"", String(describing: p1))
            }",0,,
"internal static func removed(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.you.removed"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func started(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.conversation.you.started"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func subtitleAdded(_ p1: Any, _ p2: Int) -> String {
            return L10n.tr(""Localizable"", ""content.system.missing_messages.subtitle_added"", String(describing: p1), p2)
          }",0,,
"internal static func subtitleRemoved(_ p1: Any, _ p2: Int) -> String {
            return L10n.tr(""Localizable"", ""content.system.missing_messages.subtitle_removed"", String(describing: p1), p2)
          }",0,,
"internal static func title(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.renamed_conv.title"", String(describing: p1))
          }",0,,
"internal static func titleYou(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.renamed_conv.title-you"", String(describing: p1))
          }",0,,
"internal static func other(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.session_reset.other"", String(describing: p1))
          }",0,,
"internal static func truncatedPeople(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""content.system.started_conversation.truncated_people"", String(describing: p1))
          }",0,,
"internal static func guests(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.started_conversation.complete_team.guests"", String(describing: p1))
            }",0,,
"internal static func others(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""content.system.started_conversation.truncated_people.others"", String(describing: p1))
            }",0,,
"internal static func message(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""conversation.call.many_participants_confirmation.message"", p1)
          }",0,,
"internal static func subtitle(_ p1: Any, _ p2: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.create.options.subtitle"", String(describing: p1), String(describing: p2))
          }",0,,
"internal static func title(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""conversation.delete_request_error_dialog.title"", String(describing: p1))
        }",0,,
"internal static func recordTip(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.input_bar.audio_message.keyboard.record_tip"", String(describing: p1))
            }",0,,
"internal static func message(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.input_bar.audio_message.too_long.message"", String(describing: p1))
            }",0,,
"internal static func message(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.input_bar.audio_message.too_long_size.message"", String(describing: p1))
            }",0,,
"internal static func accessibilityDescription(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.input_bar.message_preview.accessibility_description"", String(describing: p1))
          }",0,,
"internal static func fileMessage(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.input_bar.message_preview.accessibility.file_message"", String(describing: p1))
            }",0,,
"internal static func messageFrom(_ p1: Any, _ p2: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.input_bar.message_preview.accessibility.message_from"", String(describing: p1), String(describing: p2))
            }",0,,
"internal static func message(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""conversation.input_bar.message_too_long.message"", p1)
          }",0,,
"internal static func genericMessage(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""conversation.silenced.status.message.generic_message"", p1)
            }",0,,
"internal static func knock(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""conversation.silenced.status.message.knock"", p1)
            }",0,,
"internal static func mention(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""conversation.silenced.status.message.mention"", p1)
            }",0,,
"internal static func missedcall(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""conversation.silenced.status.message.missedcall"", p1)
            }",0,,
"internal static func reply(_ p1: Int) -> String {
              return L10n.tr(""Localizable"", ""conversation.silenced.status.message.reply"", p1)
            }",0,,
"internal static func incomingCall(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""conversation.status.incoming_call"", String(describing: p1))
        }",0,,
"internal static func startedConversation(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""conversation.status.started_conversation"", String(describing: p1))
        }",0,,
"internal static func youWasAdded(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""conversation.status.you_was_added"", String(describing: p1))
        }",0,,
"internal static func mention(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.status.message.mention"", String(describing: p1))
          }",0,,
"internal static func reply(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.status.message.reply"", String(describing: p1))
          }",0,,
"internal static func text(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.status.message.text"", String(describing: p1))
          }",0,,
"internal static func groups(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""conversation.status.message.missedcall.groups"", String(describing: p1))
            }",0,,
"internal static func group(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation.status.typing.group"", String(describing: p1))
          }",0,,
"internal static func accessibilityValue(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""conversation_list.header.self_team.accessibility_value"", String(describing: p1))
          }",0,,
"internal static func tooManyMembersInConversation(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""error.group_call.too_many_members_in_conversation"", p1)
        }",0,,
"internal static func tooManyParticipantsInTheCall(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""error.group_call.too_many_participants_in_the_call"", p1)
        }",0,,
"internal static func header(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""folder.creation.name.header"", String(describing: p1))
          }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""giphy.conversation.message"", String(describing: p1))
        }",0,,
"internal static func hoursLeft(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""guest_room.expiration.hours_left"", String(describing: p1))
        }",0,,
"internal static func lessThanMinutesLeft(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""guest_room.expiration.less_than_minutes_left"", String(describing: p1))
        }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""guest_room.share.message"", String(describing: p1))
        }",0,,
"internal static func title(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""landing.custom_backend.title"", String(describing: p1))
        }",0,,
"internal static func title(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""landing.custom_backend.more_info.alert.title"", String(describing: p1))
            }",0,,
"internal static func detail(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""legalhold_request.alert.detail"", String(describing: p1))
        }",0,,
"internal static func peopleWaiting(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""list.connect_request.people_waiting"", p1)
        }",0,,
"internal static func message(_ p1: Any) -> String {
              return L10n.tr(""Localizable"", ""login.sso.error.alert.message"", String(describing: p1))
            }",0,,
"internal static func message(_ p1: Any) -> String {
                return L10n.tr(""Localizable"", ""login.sso.error.alert.invalid_status.message"", String(describing: p1))
              }",0,,
"internal static func subtitleEditDate(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""message_details.subtitle_edit_date"", String(describing: p1))
      }",0,,
"internal static func subtitleSendDate(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""message_details.subtitle_send_date"", String(describing: p1))
      }",0,,
"internal static func likes(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""message_details.tabs.likes"", p1)
        }",0,,
"internal static func seen(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""message_details.tabs.seen"", p1)
        }",0,,
"internal static func plural(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""meta.degraded.degradation_reason_message.plural"", String(describing: p1))
          }",0,,
"internal static func singular(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""meta.degraded.degradation_reason_message.singular"", String(describing: p1))
          }",0,,
"internal static func removeFromFolder(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""meta.menu.remove_from_folder"", String(describing: p1))
        }",0,,
"internal static func defaultMessage(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""missive.connection_request.default_message"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func inConversation(_ p1: Any, _ p2: Any) -> String {
        return L10n.tr(""Localizable"", ""notifications.in_conversation"", String(describing: p1), String(describing: p2))
      }",0,,
"internal static func thisConversation(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""notifications.this_conversation"", String(describing: p1))
      }",0,,
"internal static func count(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""participants.people.count"", p1)
        }",0,,
"internal static func participants(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""participants.section.participants"", p1)
        }",0,,
"internal static func services(_ p1: Int) -> String {
          return L10n.tr(""Localizable"", ""participants.section.services"", p1)
        }",0,,
"internal static func footer(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""participants.section.name.footer"", p1)
          }",0,,
"internal static func domainUnvailable(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""peoplepicker.federation.domain_unvailable"", String(describing: p1))
        }",0,,
"internal static func plural(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""peoplepicker.group.title.plural"", p1)
          }",0,,
"internal static func teamConversations(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""peoplepicker.header.team_conversations"", String(describing: p1))
        }",0,,
"internal static func knowsMore(_ p1: Any, _ p2: Int) -> String {
          return L10n.tr(""Localizable"", ""peoplepicker.suggested.knows_more"", String(describing: p1), p2)
        }",0,,
"internal static func knowsOne(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""peoplepicker.suggested.knows_one"", String(describing: p1))
        }",0,,
"internal static func knowsTwo(_ p1: Any, _ p2: Any) -> String {
          return L10n.tr(""Localizable"", ""peoplepicker.suggested.knows_two"", String(describing: p1), String(describing: p2))
        }",0,,
"internal static func removeDialogMessage(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""profile.remove_dialog_message"", String(describing: p1))
      }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""profile.block_dialog.message"", String(describing: p1))
        }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""profile.cancel_connection_request_dialog.message"", String(describing: p1))
        }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""profile.connection_request_dialog.message"", String(describing: p1))
        }",0,,
"internal static func fingerprintMessageUnencrypted(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""profile.devices.fingerprint_message_unencrypted"", String(describing: p1))
        }",0,,
"internal static func verifyMessage(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""profile.devices.detail.verify_message"", String(describing: p1))
          }",0,,
"internal static func title(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""profile.devices.fingerprint_message.title"", String(describing: p1))
          }",0,,
"internal static func newUser(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""push.notification.new_user"", String(describing: p1))
        }",0,,
"internal static func activated(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""registration.devices.activated"", String(describing: p1))
        }",0,,
"internal static func title(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""registration.email_invitation.hero.title"", String(describing: p1))
          }",0,,
"internal static func lowercase(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.lowercase"", p1)
          }",0,,
"internal static func minLength(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.min_length"", p1)
          }",0,,
"internal static func noRequirements(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.no_requirements"", String(describing: p1))
          }",0,,
"internal static func number(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.number"", p1)
          }",0,,
"internal static func special(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.special"", p1)
          }",0,,
"internal static func uppercase(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.uppercase"", p1)
          }",0,,
"internal static func withRequirements(_ p1: Any, _ p2: Any) -> String {
            return L10n.tr(""Localizable"", ""registration.password.rules.with_requirements"", String(describing: p1), String(describing: p2))
          }",0,,
"internal static func title(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""registration.phone_invitation.hero.title"", String(describing: p1))
          }",0,,
"internal static func instructions(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""registration.verify_email.instructions"", String(describing: p1))
        }",0,,
"internal static func instructions(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""registration.verify_phone_number.instructions"", String(describing: p1))
        }",0,,
"internal static func resendPlaceholder(_ p1: Float) -> String {
          return L10n.tr(""Localizable"", ""registration.verify_phone_number.resend_placeholder"", p1)
        }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""self.new_device_alert.message"", String(describing: p1))
        }",0,,
"internal static func messagePlural(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""self.new_device_alert.message_plural"", String(describing: p1))
        }",0,,
"internal static func devices(_ p1: Int) -> String {
            return L10n.tr(""Localizable"", ""self.new_device_alert.title_prefix.devices"", p1)
          }",0,,
"internal static func message(_ p1: Any) -> String {
                  return L10n.tr(""Localizable"", ""self.settings.account_section.email.change.resend.message"", String(describing: p1))
                }",0,,
"internal static func resend(_ p1: Any) -> String {
                  return L10n.tr(""Localizable"", ""self.settings.account_section.email.change.verify.resend"", String(describing: p1))
                }",0,,
"internal static func message(_ p1: Any) -> String {
                  return L10n.tr(""Localizable"", ""self.settings.account_section.phone_number.change.resend.message"", String(describing: p1))
                }",0,,
"internal static func description(_ p1: Any) -> String {
                  return L10n.tr(""Localizable"", ""self.settings.account_section.phone_number.change.verify.description"", String(describing: p1))
                }",0,,
"internal static func lockDescription(_ p1: Any) -> String {
                return L10n.tr(""Localizable"", ""self.settings.privacy_security.lock_app.subtitle.lock_description"", String(describing: p1))
              }",0,,
"internal static func text(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""send_invitation.text"", String(describing: p1))
      }",0,,
"internal static func subheadline(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""team.activation_code.subheadline"", String(describing: p1))
        }",0,,
"internal static func onTwitter(_ p1: Any) -> String {
        return L10n.tr(""Localizable"", ""twitter_status.on_twitter"", String(describing: p1))
      }",0,,
"internal static func message(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""url_action.switch_backend.message"", String(describing: p1))
        }",0,,
"internal static func newUserDevice(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""voice.degradation.new_user_device"", String(describing: p1))
        }",0,,
"internal static func joining(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""voice.status.joining"", String(describing: p1))
        }",0,,
"internal static func leaving(_ p1: Any) -> String {
          return L10n.tr(""Localizable"", ""voice.status.leaving"", String(describing: p1))
        }",0,,
"internal static func incoming(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""voice.status.group_call.incoming"", String(describing: p1))
          }",0,,
"internal static func incoming(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""voice.status.one_to_one.incoming"", String(describing: p1))
          }",0,,
"internal static func outgoing(_ p1: Any) -> String {
            return L10n.tr(""Localizable"", ""voice.status.one_to_one.outgoing"", String(describing: p1))
          }",0,,
"  private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
    let format = BundleToken.bundle.localizedString(forKey: key, value: nil, table: table)
    return String(format: format, locale: Locale.current, arguments: args)
  }",0,,
"    private func presentAlertForDeletedAccountIfNeeded(_ error: NSError?) {
        guard
            error?.userSessionErrorCode == .accountDeleted,
            let reason = error?.userInfo[ZMAccountDeletedReasonKey] as? ZMAccountDeletedReason
        else {
            return
        }

        switch reason {
        case .sessionExpired:
            rootViewController.presentAlertWithOKButton(title: ""account_deleted_session_expired_alert.title"".localized,
                                                        message: ""account_deleted_session_expired_alert.message"".localized)

        case .databaseWiped:
            let wipeCompletionViewController = WipeCompletionViewController()
            wipeCompletionViewController.modalPresentationStyle = .fullScreen
            rootViewController.present(wipeCompletionViewController, animated: true)

        default:
            break
        }
    }",1,"10,11","            rootViewController.presentAlertWithOKButton(title: ""account_deleted_session_expired_alert.title"".localized,/~/                                                        message: ""account_deleted_session_expired_alert.message"".localized)"
"        didSet {
            setupAnalyticsSharing()
        }",0,,
"        super.init()

        setupAppStateCalculator()
        setupURLActionRouter()
        setupNotifications()
        setupAdditionalWindows()

        AppRootRouter.configureAppearance()

        createLifeCycleObserverTokens()
        setCallingSettings()
    }

    

    public func start(launchOptions: LaunchOptions) {
        showInitial(launchOptions: launchOptions)
    }",0,,
"    public func openDeepLinkURL(_ deepLinkURL: URL) -> Bool {
        return urlActionRouter.open(url: deepLinkURL)
    }",0,,
"    public func performQuickAction(for shortcutItem: UIApplicationShortcutItem,
                                   completionHandler: ((Bool) -> Void)?) {
        quickActionsManager.performAction(for: shortcutItem,
                                          completionHandler: completionHandler)
    }",0,,
"    private func setupAppStateCalculator() {
        appStateCalculator.delegate = self
    }",0,,
"    private func setupURLActionRouter() {
        urlActionRouter.delegate = self
    }",0,,
"    private func setupNotifications() {
        setupApplicationNotifications()
        setupContentSizeCategoryNotifications()
        setupAudioPermissionsNotifications()
    }",0,,
"    private func setupAdditionalWindows() {
        screenCurtain.makeKeyAndVisible()
        screenCurtain.isHidden = true
    }",0,,
"    private func createLifeCycleObserverTokens() {
        sessionManagerLifeCycleObserver.createLifeCycleObserverTokens()
    }",0,,
"    private func setCallingSettings() {
        sessionManager.updateCallNotificationStyleFromSettings()
        sessionManager.useConstantBitRateAudio = SecurityFlags.forceConstantBitRateCalls.isEnabled
            ? true
            : Settings.shared[.callingConstantBitRate] ?? false
    }",0,,
"    private func enqueueTransition(to appState: AppState, completion: @escaping () -> Void = {}) {
        
        
        appStateTransitionQueue.async { [weak self] in
            guard let `self` = self else { return }

            self.appStateTransitionGroup.wait()

            DispatchQueue.main.async {
                self.transition(to: appState, completion: completion)
            }
        }
    }",0,,
"    func appStateCalculator(_: AppStateCalculator,
                            didCalculate appState: AppState,
                            completion: @escaping () -> Void) {
        enqueueTransition(to: appState, completion: completion)
    }",0,,
"    private func transition(to appState: AppState, completion: @escaping () -> Void) {
        applicationWillTransition(to: appState)

        resetAuthenticationCoordinatorIfNeeded(for: appState)

        let completionBlock = { [weak self] in
            completion()
            self?.applicationDidTransition(to: appState)
        }

        switch appState {
        case .blacklisted:
            showBlacklisted(completion: completionBlock)
        case .jailbroken:
            showJailbroken(completion: completionBlock)
        case .databaseFailure:
            showDatabaseLoadingFailure(completion: completionBlock)
        case .migrating:
            showLaunchScreen(isLoading: true, completion: completionBlock)
        case .unauthenticated(error: let error):
            screenCurtain.delegate = nil
            configureUnauthenticatedAppearance()
            showUnauthenticatedFlow(error: error, completion: completionBlock)
        case .authenticated(completedRegistration: let completedRegistration):
            configureAuthenticatedAppearance()
            executeAuthenticatedBlocks()
            
            screenCurtain.delegate = ZMUserSession.shared()
            showAuthenticated(isComingFromRegistration: completedRegistration,
                              completion: completionBlock)
        case .headless:
            showLaunchScreen(completion: completionBlock)
        case .loading(account: let toAccount, from: let fromAccount):
            showSkeleton(fromAccount: fromAccount,
                         toAccount: toAccount,
                         completion: completionBlock)
        case .locked:
            
            screenCurtain.delegate = ZMUserSession.shared()
            showAppLock(completion: completionBlock)
        }
    }",0,,
"    private func resetAuthenticationCoordinatorIfNeeded(for state: AppState) {
        switch state {
        case .authenticated:
            authenticationCoordinator = nil
        default:
            break
        }
    }",0,,
"    func performWhenAuthenticated(_ block : @escaping () -> Void) {
        if case .authenticated = appStateCalculator.appState {
            block()
        } else {
            authenticatedBlocks.append(block)
        }
    }",0,,
"    func executeAuthenticatedBlocks() {
        while !authenticatedBlocks.isEmpty {
            authenticatedBlocks.removeFirst()()
        }
    }",0,,
"    func reload() {
        enqueueTransition(to: .headless)
        enqueueTransition(to: appStateCalculator.appState)
    }",0,,
"    private func showInitial(launchOptions: LaunchOptions) {
        enqueueTransition(to: .headless) { [weak self] in
            Analytics.shared.tagEvent(""app.open"")
            self?.sessionManager.start(launchOptions: launchOptions)
        }
    }",0,,
"        rootViewController.set(childViewController: AppLockModule.build(session: session),
                               completion: completion)
    }

    
    private func configureUnauthenticatedAppearance() {
        rootViewController.view.window?.tintColor = UIColor.Wire.primaryLabel
        ValidatedTextField.appearance(whenContainedInInstancesOf: [AuthenticationStepController.self]).tintColor = UIColor.Team.activeButton
    }",0,,
"    private func configureAuthenticatedAppearance() {
        rootViewController.view.window?.tintColor = .accent()
        UIColor.setAccentOverride(.undefined)
    }",0,,
"    private func setupAnalyticsSharing() {
        guard
            appStateCalculator.wasUnauthenticated,
            let selfUser = SelfUser.provider?.selfUser,
            selfUser.isTeamMember
        else {
            return
        }

        TrackingManager.shared.disableCrashSharing = true
        TrackingManager.shared.disableAnalyticsSharing = false
        Analytics.shared.provider?.selfUser = selfUser
    }",0,,
"    private func buildAuthenticatedRouter(account: Account, isComingFromRegistration: Bool) -> AuthenticatedRouter? {

        let needToShowDataUsagePermissionDialog = appStateCalculator.wasUnauthenticated
                                                    && !SelfUser.current.isTeamMember

        return AuthenticatedRouter(rootViewController: rootViewController,
                                   account: account,
                                   selfUser: ZMUser.selfUser(),
                                   isComingFromRegistration: isComingFromRegistration,
                                   needToShowDataUsagePermissionDialog: needToShowDataUsagePermissionDialog)
    }",0,,
"    private func applicationWillTransition(to appState: AppState) {
        appStateTransitionGroup.enter()
        configureSelfUserProviderIfNeeded(for: appState)
        configureColorScheme()
    }",0,,
"    private func applicationDidTransition(to appState: AppState) {
        if case .unauthenticated(let error) = appState {
            presentAlertForDeletedAccountIfNeeded(error)
        }

        if case .authenticated = appState {
            authenticatedRouter?.updateActiveCallPresentationState()

            ZClientViewController.shared?.legalHoldDisclosureController?.discloseCurrentState(cause: .appOpen)
        }

        resetSelfUserProviderIfNeeded(for: appState)
        urlActionRouter.openDeepLink(for: appState)
        appStateTransitionGroup.leave()
    }",0,,
"    private func resetSelfUserProviderIfNeeded(for appState: AppState) {
        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }

        switch appState {
        case .authenticated: break
        default:
            SelfUser.provider = nil
        }
    }",0,,
"    private func configureSelfUserProviderIfNeeded(for appState: AppState) {
        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }

        if case .authenticated = appState {
            SelfUser.provider = ZMUserSession.shared()
        }
    }",0,,
"    private func configureColorScheme() {
        let colorScheme = ColorScheme.default
        colorScheme.accentColor = .accent()
        colorScheme.variant = Settings.shared.colorSchemeVariant
    }",0,,
"    func urlActionRouterWillShowCompanyLoginError() {
        authenticationCoordinator?.cancelCompanyLogin()
    }",0,,
"    func addObserverToken(_ token: NSObjectProtocol) {
        observerTokens.append(token)
    }",0,,
"    func applicationDidBecomeActive() {
        updateOverlayWindowFrame()
        teamMetadataRefresher.triggerRefreshIfNeeded()
    }",0,,
"    func applicationDidEnterBackground() {
        let unreadConversations = sessionManager.accountManager.totalUnreadCount
        UIApplication.shared.applicationIconBadgeNumber = unreadConversations
    }",0,,
"    func applicationWillEnterForeground() {
        updateOverlayWindowFrame()
    }",0,,
"    func updateOverlayWindowFrame(size: CGSize? = nil) {
        if let size = size {
            screenCurtain.frame.size = size
        } else {
            screenCurtain.frame = UIApplication.shared.keyWindow?.frame ?? UIScreen.main.bounds
        }
    }",0,,
"    func contentSizeCategoryDidChange() {
        NSAttributedString.invalidateParagraphStyle()
        NSAttributedString.invalidateMarkdownStyle()
        ConversationListCell.invalidateCachedCellSize()
        defaultFontScheme = FontScheme(contentSizeCategory: UIApplication.shared.preferredContentSizeCategory)
        AppRootRouter.configureAppearance()
    }",0,,
"public static func configureAppearance() {
        let navigationBarTitleBaselineOffset: CGFloat = 2.5

        let attributes: [NSAttributedString.Key: Any] = [.font: UIFont.systemFont(ofSize: 11, weight: .semibold), .baselineOffset: navigationBarTitleBaselineOffset]
        let barButtonItemAppearance = UIBarButtonItem.appearance(whenContainedInInstancesOf: [DefaultNavigationBar.self])
        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .normal)
        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .highlighted)
        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .disabled)
    }",0,,
"    func userDidGrantAudioPermissions() {
        sessionManager.updateCallNotificationStyleFromSettings()
    }",0,,
"self.init(light: color, dark: color)
    }
}

extension UIColor {

    static func from(scheme: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {
        return ColorScheme.default.color(named: scheme, variant: variant)
    }

    
    
    private static let accentColorNameColorBlendingCoefficientsDark: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.8, 0.64]
    private static let accentColorNameColorBlendingCoefficientsLight: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.64, 1.0]

    
    class func nameColor(for accentColor: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {

        assert(accentColor.rawValue <= ZMAccentColor.max.rawValue)

        let coefficientsArray = variant == .dark ? accentColorNameColorBlendingCoefficientsDark : accentColorNameColorBlendingCoefficientsLight
        let coefficient = coefficientsArray[Int(accentColor.rawValue)]

        let background: UIColor = variant == .dark ? .black : .white
        return background.mix(UIColor(fromZMAccentColor: accentColor), amount: coefficient)
    }
}",1,"17,18,19,22,24","/~/        assert(accentColor.rawValue <= ZMAccentColor.max.rawValue)/~//~//~/        return background.mix(UIColor(fromZMAccentColor: accentColor), amount: coefficient)"
"    class func nameColor(for accentColor: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {

        assert(accentColor.rawValue <= ZMAccentColor.max.rawValue)

        let coefficientsArray = variant == .dark ? accentColorNameColorBlendingCoefficientsDark : accentColorNameColorBlendingCoefficientsLight
        let coefficient = coefficientsArray[Int(accentColor.rawValue)]

        let background: UIColor = variant == .dark ? .black : .white
        return background.mix(UIColor(fromZMAccentColor: accentColor), amount: coefficient)
    }",1,"1,2,3,6,8","/~/        assert(accentColor.rawValue <= ZMAccentColor.max.rawValue)/~//~//~/        return background.mix(UIColor(fromZMAccentColor: accentColor), amount: coefficient)"
"fileprivate func colorPair(accentColor: UIColor) -> ColorPair {
        switch self {
        case .textForeground:
            return ColorPair(light: .graphite, dark: .white)
        case .textBackground:
            return ColorPair(light: .white, dark: .backgroundGraphite)
        case .textDimmed:
            return ColorPair(both: .lightGraphite)
        case .textPlaceholder:
            return ColorPair(both: .lightGraphiteAlpha64)
        case .separator:
            return ColorPair(light: .lightGraphiteAlpha48, dark: .lightGraphiteAlpha24)
        case .barBackground:
            return ColorPair(light: .white, dark: .backgroundLightGraphite)
        case .background:
            return ColorPair(light: .white, dark: .backgroundGraphite)
        case .contentBackground:
            return ColorPair(light: .white97, dark: .backgroundGraphite)
        case .iconNormal:
            return ColorPair(light: .graphite, dark: .white)
        case .iconSelected:
            return ColorPair(light: .white, dark: .black)
        case .iconHighlighted:
            return ColorPair(both: .white)
        case .iconShadow:
            return ColorPair(light: .blackAlpha8, dark: .blackAlpha24)
        case .iconHighlight:
            return ColorPair(light: .white, dark: .whiteAlpha16)
        case .iconBackgroundSelected:
            return ColorPair(light: accentColor, dark: .white)
        case .iconBackgroundSelectedNoAccent:
            return ColorPair(light: .graphite, dark: .white)
        case .popUpButtonOverlayShadow:
            return ColorPair(light: .blackAlpha24, dark: .black)
        case .buttonHighlighted:
            return ColorPair(light: .whiteAlpha24, dark: .blackAlpha24)
        case .buttonEmptyText:
            return ColorPair(light: accentColor, dark: .white)
        case .buttonFaded:
            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)
        case .tabNormal:
            return ColorPair(light: .blackAlpha48, dark: .whiteAlpha56)
        case .tabSelected:
            return ColorPair(light: .graphite, dark: .white)
        case .tabHighlighted:
            return ColorPair(light: .lightGraphite, dark: .lightGraphiteAlpha48)
        case .backgroundOverlay:
            return ColorPair(light: .blackAlpha24, dark: .blackAlpha48)
        case .backgroundOverlayWithoutPicture:
            return ColorPair(both: .blackAlpha80)
        case .avatarBorder:
            return ColorPair(light: .blackAlpha8, dark: .whiteAlpha16)
        case .audioButtonOverlay:
            return ColorPair(both: .lightGraphiteAlpha24)
        case .placeholderBackground:
            return ColorPair(light: .lightGraphiteWhite, dark: .lightGraphiteDark)
        case .loadingDotActive:
            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)
        case .loadingDotInactive:
            return ColorPair(light: .graphiteAlpha16, dark: .whiteAlpha16)
        case .paleSeparator:
            return ColorPair(both: .lightGraphiteAlpha24)
        case .listAvatarInitials:
            return ColorPair(both: .blackAlpha40)
        case .sectionBackground:
            return ColorPair(both: .clear)
        case .sectionBackgroundHighlighted:
            return ColorPair(light: .graphiteAlpha4, dark: .backgroundLightGraphite)
        case .sectionText:
            return ColorPair(light: .blackAlpha40, dark: .whiteAlpha40)
        case .tokenFieldBackground:
            return ColorPair(light: .blackAlpha4, dark: .whiteAlpha16)
        case .tokenFieldTextPlaceHolder:
            return ColorPair(light: .lightGraphite, dark: .whiteAlpha40)
        case .cellSeparator:
            return ColorPair(light: .graphiteAlpha8, dark: .whiteAlpha8)
        case .searchBarBackground:
            return ColorPair(light: .white, dark: .whiteAlpha8)
        case .iconGuest:
            return ColorPair(light: .backgroundGraphiteAlpha40, dark: .whiteAlpha64)
        case .selfMentionHighlight:
            return ColorPair(light: .amberAlpha48, dark: .amberAlpha80)
        case .cellHighlight:
            return ColorPair(light: .white97, dark: .whiteAlpha16)
        case .replyBorder:
            return ColorPair(light: UIColor(white: 233.0/255.0, alpha: 1),
                             dark: UIColor(white: 114.0/255.0, alpha: 1))
        case .replyHighlight:
            return ColorPair(light: UIColor(rgb: 0x33373A, alpha: 0.24),
                             dark: UIColor(white: 1, alpha: 0.24))

        case .secondaryAction:
            return ColorPair(light: UIColor(rgb: 0xE8ECEE), dark: .backgroundLightGraphite)
        case .secondaryActionDimmed:
            return ColorPair(light: UIColor(rgb: 0xE8ECEE, alpha: 0.24), dark: UIColor.backgroundLightGraphite.withAlphaComponent(0.24))

        case .errorIndicator:
            return ColorPair(light: UIColor(rgb: 0xE60606), dark: UIColor(rgb: 0xFC3E37))

        case .landingScreen:
            return ColorPair(light: .graphiteDark, dark: .white)

        case .utilityError:
            return ColorPair(light: UIColor(rgb: 0xE41734), dark: UIColor(rgb: 0xFC7887))
        case .utilityNeutral:
            return ColorPair(light: UIColor(rgb: 0x0772DE), dark: UIColor(rgb: 0x26BDFF))
        case .utilitySuccess:
            return ColorPair(light: UIColor(rgb: 0x148545), dark: UIColor(rgb: 0x35C763))

        case .textSecurityNotClassified:
            return ColorPair(light: .white, dark: .graphite)
        case .backgroundSecurityNotClassified:
            return ColorPair(light: .graphite, dark: .white)

        }
    }",0,,
"    private(set) var colors: [AnyHashable: Any]?

    var variant: ColorSchemeVariant = .light

    private(set) var defaultColorScheme: ColorScheme?
    var accentColor: UIColor = .red

    var keyboardAppearance: UIKeyboardAppearance {
        return ColorScheme.keyboardAppearance(for: variant)
    }",0,,
"    class func keyboardAppearance(for variant: ColorSchemeVariant) -> UIKeyboardAppearance {
        return variant == .light ? .light : .dark
    }",0,,
"    func color(named: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {
        let colorSchemeVariant = variant ?? self.variant

        let colorPair = named.colorPair(accentColor: accentColor)
        switch colorSchemeVariant {
        case .dark:
            return colorPair.dark
        case .light:
            return colorPair.light
        }
    }",0,,
"    func nameAccent(for color: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {
        return UIColor.nameColor(for: color, variant: variant)
    }",0,,
"    static func from(scheme: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {
        return ColorScheme.default.color(named: scheme, variant: variant)
    }",0,,
"    func mainColor(color: UIColor?) -> UIColor {
        return color ?? UIColor.from(scheme: .textForeground, variant: self)
    }",0,,
"    public func isGuest(in conversation: ConversationLike) -> Bool {
        return _isGuest(in: conversation)
    }",0,,
"    public func canManagedGroupRole(of user: UserType, conversation: ZMConversation) -> Bool {
        guard isGroupAdmin(in: conversation) else { return false }
        return !user.isSelfUser && (user.isConnected || isOnSameTeam(otherUser: user))
    }",0,,
"    public func isGroupAdmin(in conversation: ConversationLike) -> Bool {
        return role(in: conversation)?.name == ZMConversation.defaultAdminRoleName
    }",0,,
"public func role(in conversation: ConversationLike?) -> Role? {
        return participantRoles.first(where: { $0.conversation === conversation })?.role
    }",0,,
"    @objc class func keyPathsForValuesAffectingIsUnderLegalHold() -> Set<String> {
        return [UserClientsKey, ""clients.deviceClass""]
    }",0,,
"    public func refreshRichProfile() {
        needsRichProfileUpdate = true
    }",0,,
"    public func refreshMembership() {
        membership?.needsToBeUpdatedFromBackend = true
    }",0,,
"    public func refreshTeamData() {
        team?.refreshMetadata()
    }",0,,
"    fileprivate static func validate(string : String) -> Bool {
        return CharacterSet(charactersIn: string).isSubset(of: legalCharacterSet)
    }",0,,
"    @NSManaged public internal(set) var membership: Member?

    
    @NSManaged var reactions: Set<Reaction>
    
    
    @NSManaged var systemMessages: Set<ZMSystemMessage>
    
    @NSManaged var expiresAt: Date?
    
    
    @NSManaged public internal(set) var isAccountDeleted: Bool
    
    @NSManaged public var usesCompanyLogin: Bool
    
    
    @NSManaged public var needsToRefetchLabels: Bool
    
    @NSManaged public var domain: String?
    
    @objc(setImageData:size:)
    public func setImage(data: Data?, size: ProfileImageSize) {
        guard let imageData = data else {
            managedObjectContext?.zm_userImageCache?.removeAllUserImages(self)
            return
        }
        managedObjectContext?.zm_userImageCache?.setUserImage(self, imageData: imageData, size: size)
        
        if let uiContext = managedObjectContext?.zm_userInterface {
            let changedKey = size == .preview ? #keyPath(ZMUser.previewImageData) : #keyPath(ZMUser.completeImageData)
            NotificationDispatcher.notifyNonCoreDataChanges(objectID: objectID, changedKeys: [changedKey], uiContext: uiContext)
        }
    }",0,,
"    public func imageData(for size: ProfileImageSize, queue: DispatchQueue, completion: @escaping (_ imageData: Data?) -> Void) {
        managedObjectContext?.zm_userImageCache?.userImage(self, size: size, queue: queue, completion: completion)
    }",0,,
"    public func imageData(for size: ProfileImageSize) -> Data? {
        return managedObjectContext?.zm_userImageCache?.userImage(self, size: size)
    }",0,,
"    public func updateAndSyncProfileAssetIdentifiers(previewIdentifier: String, completeIdentifier: String) {
        guard isSelfUser else { return }
        previewProfileAssetIdentifier = previewIdentifier
        completeProfileAssetIdentifier = completeIdentifier
        setLocallyModifiedKeys([ZMUser.previewProfileAssetIdentifierKey, ZMUser.completeProfileAssetIdentifierKey])
    }",0,,
"            if let size = data[""size""].flatMap(ProfileImageSize.init), let key = data[""key""].flatMap(AssetKey.init) {
                switch size {
                case .preview:
                    if key.stringValue != previewProfileAssetIdentifier {
                        previewProfileAssetIdentifier = key.stringValue
                    }
                case .complete:
                    if key.stringValue != completeProfileAssetIdentifier {
                        completeProfileAssetIdentifier = key.stringValue
                    }
                }
            }
        }
    }",0,,
"    @objc public func requestPreviewProfileImage() {
        guard let moc = self.managedObjectContext, moc.zm_isUserInterfaceContext, !moc.zm_userImageCache.hasUserImage(self, size: .preview) else { return }
        
        NotificationInContext(name: .userDidRequestPreviewAsset,
                              context: moc.notificationContext,
                              object: self.objectID).post()
    }",0,,
"    @objc public func requestCompleteProfileImage() {
        guard let moc = self.managedObjectContext, moc.zm_isUserInterfaceContext, !moc.zm_userImageCache.hasUserImage(self, size: .complete) else { return }
        
        NotificationInContext(name: .userDidRequestCompleteAsset,
                              context: moc.notificationContext,
                              object: self.objectID).post()
    }",0,,
"    @objc public func markAccountAsDeleted(at timestamp: Date) {
        isAccountDeleted = true
        removeFromAllConversations(at: timestamp)
    }",0,,
"fileprivate func removeFromAllConversations(at timestamp: Date) {
        let allGroupConversations: [ZMConversation] = participantRoles.compactMap {
            guard let convo = $0.conversation,
                convo.conversationType == .group else { return nil}
            return convo
        }
        
        allGroupConversations.forEach { conversation in
            if isTeamMember && conversation.team == team {
                conversation.appendTeamMemberRemovedSystemMessage(user: self, at: timestamp)
            } else {
                conversation.appendParticipantRemovedSystemMessage(user: self, at: timestamp)
            }
            conversation.removeParticipantAndUpdateConversationState(user: self, initiatingUser: self)
        }
    }",0,,
"public func addParticipantsAndUpdateConversationState(usersAndRoles: [(ZMUser, Role?)]) {
        
        
        let doesExistsOnBackend = self.remoteIdentifier != nil
        
        let addedRoles = usersAndRoles.compactMap { (user, role) -> ParticipantRole? in
            guard !user.isAccountDeleted else { return nil }
            
            
            require(
                role == nil || (role!.team == self.team || role!.conversation == self),
                ""Tried to add a role that does not belong to the conversation""
            )
            
            guard let (result, pr) = updateExistingOrCreateParticipantRole(for: user, with: role) else { return nil }
            return (result == .created) ? pr : nil
        }
        
        let addedSelfUser = doesExistsOnBackend && addedRoles.contains(where: {$0.user.isSelfUser})
        if addedSelfUser {
            self.markToDownloadRolesIfNeeded()
            self.needsToBeUpdatedFromBackend = true
        }
        
        if !addedRoles.isEmpty {
            self.checkIfArchivedStatusChanged(addedSelfUser: addedSelfUser)
            self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}))
        }
    }",1,26,self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}))
"private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>) {
        self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set(addedUsers.flatMap { $0.clients }), causedBy: addedUsers)
    }",1,"0,1","private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>) {/~/        self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set(addedUsers.flatMap { $0.clients }), causedBy: addedUsers)"
"    func sortedUsers(_ users: Set<ZMUser>) -> [ZMUser] {
        let nameDescriptor = NSSortDescriptor(key: ""normalizedName"", ascending: true)
        let sortedUser = (users as NSSet?)?.sortedArray(using: [nameDescriptor]) as? [ZMUser]

        return sortedUser ?? []
    }",0,,
"    public class func keyPathsForValuesAffectingActiveParticipants() -> Set<String> {
        return Set(participantRolesKeys)
    }",0,,
"    public class func keyPathsForValuesAffectingLocalParticipants() -> Set<String> {
        return Set(participantRolesKeys)
    }",0,,
"    public class func keyPathsForValuesAffectingLocalParticipantRoles() -> Set<String> {
        return Set(participantRolesKeys + [#keyPath(ZMConversation.participantRoles.role)])
    }",0,,
"    public class func keyPathsForValuesAffectingDisplayName() -> Set<String> {
        return Set([ZMConversationConversationTypeKey,
                    ""participantRoles.user.name"",
                    ""connection.to.name"",
                    ""connection.to.availability"",
                    ZMConversationUserDefinedNameKey] +
                   ZMConversation.participantRolesKeys)
    }",0,,
"    public class func keyPathsForValuesAffectingLocalParticipantsExcludingSelf() -> Set<String> {
        return Set(ZMConversation.participantRolesKeys)
    }",0,,
"    public func addParticipantAndUpdateConversationState(user: ZMUser, role: Role?) {
        self.addParticipantsAndUpdateConversationState(usersAndRoles: [(user, role)])
    }",0,,
"public func addParticipantsAndUpdateConversationState(users: Set<ZMUser>, role: Role?) {
        self.addParticipantsAndUpdateConversationState(usersAndRoles: users.map { ($0, role) })
    }",0,,
"private func updateExistingOrCreateParticipantRole(for user: ZMUser, with role: Role?) -> (FetchOrCreation, ParticipantRole)? {
        
        guard let moc = self.managedObjectContext else { return nil }
        
        
        if let current = self.participantRoles.first(where: {$0.user == user}) {
            if let role = role {
                current.role = role
            }
            
            return (.fetched, current)
            
        } else {
            
            let participantRole = ParticipantRole.insertNewObject(in: moc)
            participantRole.conversation = self
            participantRole.user = user
            participantRole.role = role
            
            return (.created, participantRole)
        }
    }",0,,
"    private func checkIfArchivedStatusChanged(addedSelfUser: Bool) {
        if addedSelfUser &&
            self.mutedStatus == MutedMessageOptionValue.none.rawValue &&
            self.isArchived
        {
            self.isArchived = false
        }
    }",0,,
"public func removeParticipantsAndUpdateConversationState(users: Set<ZMUser>, initiatingUser: ZMUser? = nil) {
        
        guard let moc = self.managedObjectContext else { return }
        let existingUsers = Set(self.participantRoles.map { $0.user })
        
        let removedUsers = Set(users.compactMap { user -> ZMUser? in
            
            guard existingUsers.contains(user),
                let existingRole = participantRoles.first(where: { $0.user == user })
                else { return nil }
            
            participantRoles.remove(existingRole)
            moc.delete(existingRole)
            return user
        })
        
        if !removedUsers.isEmpty {
            let removedSelf = removedUsers.contains(where: { $0.isSelfUser })
            self.checkIfArchivedStatusChanged(removedSelfUser: removedSelf, initiatingUser: initiatingUser)
            self.checkIfVerificationLevelChanged(removedUsers: removedUsers)
        }
    }",0,,
"    public func removeParticipantAndUpdateConversationState(user: ZMUser, initiatingUser: ZMUser? = nil) {
        self.removeParticipantsAndUpdateConversationState(users: Set(arrayLiteral: user), initiatingUser: initiatingUser)
    }",0,,
"    private func checkIfArchivedStatusChanged(removedSelfUser: Bool, initiatingUser: ZMUser?) {
        if removedSelfUser, let initiatingUser = initiatingUser {
            self.isArchived = initiatingUser.isSelfUser
        }
    }",0,,
"    private func checkIfVerificationLevelChanged(removedUsers: Set<ZMUser>) {
        self.increaseSecurityLevelIfNeededAfterRemoving(users: removedUsers)
    }",0,,
"    public func getRoles() -> Set<Role> {
        if let team = team {
            return team.roles
        }
        return nonTeamRoles
    }",0,,
"@objc public func markToDownloadRolesIfNeeded() {
        guard self.conversationType == .group else { return }
        
        let selfUser = ZMUser.selfUser(in: self.managedObjectContext!)
        let notInMyTeam = self.teamRemoteIdentifier == nil ||
            selfUser.team?.remoteIdentifier != self.teamRemoteIdentifier
        
        guard notInMyTeam else { return }
        
        if self.nonTeamRoles.isEmpty ||
            self.nonTeamRoles.first(where: {!$0.actions.isEmpty}) == nil 
        {
            self.needsToDownloadRoles = true
        }
    }",0,,
"func has(participantWithId userId: UserId?) -> Bool {
        return localParticipants.contains { $0.userId == userId }
    }",0,,
"    private func increaseSecurityLevelIfNeeded(for cause: SecurityChangeCause) {
        guard securityLevel != .secure &&
            allUsersTrusted &&
            allParticipantsHaveClients &&
            conversationType != .connection else {
                return
        }

        securityLevel = .secure
        appendNewIsSecureSystemMessage(cause: cause)
        notifyOnUI(name: ZMConversation.isVerifiedNotificationName)
    }",1,"1,4,5",        guard securityLevel != .secure &&/~/            conversationType != .connection else {/~/                return
"    public init(rawValue: Int) {
        self.rawValue = rawValue
    }",0,,
"get {
            willAccessValue(forKey: #keyPath(legalHoldStatus))
            defer { didAccessValue(forKey: #keyPath(legalHoldStatus)) }

            if let status = ZMConversationLegalHoldStatus(rawValue: primitiveLegalHoldStatus.int16Value) {
                return status
            } else {
                return .disabled
            }
        }
        set {
            willChangeValue(forKey: #keyPath(legalHoldStatus))
            primitiveLegalHoldStatus = NSNumber(value: newValue.rawValue)
            didChangeValue(forKey: #keyPath(legalHoldStatus))
        }
    }",0,,
"    @objc public func verifyLegalHoldSubjects() {
        needsToVerifyLegalHold = true
        managedObjectContext?.saveOrRollback()
    }",0,,
"    public func updateSecurityLevelIfNeededAfterReceiving(message: GenericMessage, timestamp: Date) {
        updateLegalHoldIfNeededWithHint(from: message, timestamp: timestamp)
    }",0,,
"    public func updateSecurityLevelIfNeededAfterFetchingClients(changes: ZMConversationRemoteClientChangeSet) {
        needsToVerifyLegalHold = false

        if changes.isEmpty {
            applySecurityChanges(cause: .verifyLegalHold)
        }
    }",0,,
"    public func increaseSecurityLevelIfNeededAfterTrusting(clients: Set<UserClient>) {
         applySecurityChanges(cause: .verifiedClients(clients))
    }",0,,
"    public func increaseSecurityLevelIfNeededAfterRemoving(clients: [ZMUser: Set<UserClient>]) {
        applySecurityChanges(cause: .removedClients(clients))
    }",0,,
"    public func increaseSecurityLevelIfNeededAfterRemoving(users: Set<ZMUser>) {
        applySecurityChanges(cause: .removedUsers(users))
    }",0,,
"    public func decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set<UserClient>, causedBy message: ZMOTRMessage?) {
        applySecurityChanges(cause: .addedClients(clients, source: message))
    }",0,,
"    public func decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set<UserClient>, causedBy users: Set<ZMUser>) {
        applySecurityChanges(cause: .addedUsers(users))
    }",0,,
"    public func decreaseSecurityLevelIfNeededAfterIgnoring(clients: Set<UserClient>) {
        applySecurityChanges(cause: .ignoredClients(clients))
    }",0,,
"    private func applySecurityChanges(cause: SecurityChangeCause) {
        updateLegalHoldState(cause: cause)
        updateSecurityLevel(cause: cause)
    }",0,,
"private func updateLegalHoldState(cause: SecurityChangeCause) {
        guard !needsToVerifyLegalHold, !localParticipants.any({ $0.clients.any(\.needsToBeUpdatedFromBackend) }) else {
            
            return
        }
        
        let detectedParticipantsUnderLegalHold = localParticipants.any(\.isUnderLegalHold)

        switch (legalHoldStatus, detectedParticipantsUnderLegalHold) {
        case (.disabled, true):
            legalHoldStatus = .pendingApproval
            appendLegalHoldEnabledSystemMessageForConversation(cause: cause)
            expireAllPendingMessagesBecauseOfSecurityLevelDegradation()

        case (.pendingApproval, false), (.enabled, false):
            legalHoldStatus = .disabled
            appendLegalHoldDisabledSystemMessageForConversation()

        default:
            
            break
        }
    }",0,,
"    private func updateSecurityLevel(cause: SecurityChangeCause) {
        switch cause {
        case .addedUsers, .addedClients, .ignoredClients:
            degradeSecurityLevelIfNeeded(for: cause)

        case .removedUsers, .removedClients, .verifiedClients:
            increaseSecurityLevelIfNeeded(for: cause)
            
        case .verifyLegalHold:
            
            break
        }
    }",0,,
"    private func degradeSecurityLevelIfNeeded(for cause: SecurityChangeCause) {
        guard securityLevel == .secure && !allUsersTrusted else {
            return
        }

        securityLevel = .secureWithIgnored

        switch cause {
        case .addedClients, .addedUsers:
            appendNewAddedClientSystemMessage(cause: cause)
            expireAllPendingMessagesBecauseOfSecurityLevelDegradation()
        case .ignoredClients(let clients):
            appendIgnoredClientsSystemMessage(ignored: clients)
        default:
            break
        }
    }",0,,
"    private func updateLegalHoldIfNeededWithHint(from message: GenericMessage, timestamp: Date) {
        switch message.legalHoldStatus {
        case .enabled where !legalHoldStatus.denotesEnabledComplianceDevice:
            needsToVerifyLegalHold = true
            legalHoldStatus = .pendingApproval
            appendLegalHoldEnabledSystemMessageForConversationAfterReceivingMessage(at: timestamp)
            expireAllPendingMessagesBecauseOfSecurityLevelDegradation()
        case .disabled where legalHoldStatus.denotesEnabledComplianceDevice:
            needsToVerifyLegalHold = true
            legalHoldStatus = .disabled
            appendLegalHoldDisabledSystemMessageForConversationAfterReceivingMessage(at: timestamp)
        default:
            break
        }
    }",0,,
"    @objc public func appendNewPotentialGapSystemMessage(users: Set<ZMUser>?, timestamp: Date) {
        
        let previousLastMessage = lastMessage
        let systemMessage = self.appendSystemMessage(type: .potentialGap,
                                                     sender: ZMUser.selfUser(in: self.managedObjectContext!),
                                                     users: users,
                                                     clients: nil,
                                                     timestamp: timestamp)
        systemMessage.needsUpdatingUsers = true
        
        if let previousLastMessage = previousLastMessage as? ZMSystemMessage, previousLastMessage.systemMessageType == .potentialGap,
           let previousLastMessageTimestamp = previousLastMessage.serverTimestamp, previousLastMessageTimestamp <= timestamp {
            
            
            
            
            systemMessage.users = previousLastMessage.users
            self.managedObjectContext?.delete(previousLastMessage)
        }
    }",0,,
"public func appendDecryptionFailedSystemMessage(at date: Date?, sender: ZMUser, client: UserClient?, errorCode: Int) {
        let type = (UInt32(errorCode) == CBOX_REMOTE_IDENTITY_CHANGED.rawValue) ? ZMSystemMessageType.decryptionFailed_RemoteIdentityChanged : ZMSystemMessageType.decryptionFailed
        let clients = client.flatMap { Set(arrayLiteral: $0) } ?? Set<UserClient>()
        let serverTimestamp = date ?? timestampAfterLastMessage()
        let systemMessage = appendSystemMessage(type: type,
                                               sender: sender,
                                               users: nil,
                                               clients: clients,
                                               timestamp: serverTimestamp)
        
        systemMessage.senderClientID = client?.remoteIdentifier
        systemMessage.decryptionErrorCode = NSNumber(integerLiteral: errorCode)
    }",0,,
"public func addParticipantAndSystemMessageIfMissing(_ user: ZMUser, date dateOptional: Date?) {
        let date = dateOptional ?? Date()

        guard !user.isSelfUser, !localParticipants.contains(user) else { return }
        
        zmLog.debug(""Sender: \(user.remoteIdentifier?.transportString() ?? ""n/a"") missing from participant list: \(localParticipants.map{ $0.remoteIdentifier} )"")
        
        switch conversationType {
        case .group:
            appendSystemMessage(type: .participantsAdded, sender: user, users: Set(arrayLiteral: user), clients: nil, timestamp: date)
        case .oneOnOne, .connection:
            if user.connection == nil {
                user.connection = connection ?? ZMConnection.insertNewObject(in: managedObjectContext!)
            } else if connection == nil {
                connection = user.connection
            }
            user.connection?.needsToBeUpdatedFromBackend = true
        default:
            break
        }
        
        
        self.addParticipantAndUpdateConversationState(user: user, role: nil)
        
        
        needsToBeUpdatedFromBackend = true
    }",0,,
"    private func appendLegalHoldEnabledSystemMessageForConversation(cause: SecurityChangeCause) {
        var timestamp : Date?
        
        if case .addedClients(_, let message) = cause, message?.conversation == self, message?.isUpdatingExistingMessage == false {
            timestamp = self.timestamp(before: message)
        }
        
        appendSystemMessage(type: .legalHoldEnabled,
                            sender: ZMUser.selfUser(in: self.managedObjectContext!),
                            users: nil,
                            clients: nil,
                            timestamp: timestamp ?? timestampAfterLastMessage())
    }",0,,
"    private func appendLegalHoldEnabledSystemMessageForConversationAfterReceivingMessage(at timestamp: Date) {
        appendSystemMessage(type: .legalHoldEnabled,
                            sender: ZMUser.selfUser(in: self.managedObjectContext!),
                            users: nil,
                            clients: nil,
                            timestamp: timestamp.previousNearestTimestamp)
    }",0,,
"    private func appendLegalHoldDisabledSystemMessageForConversation() {
        appendSystemMessage(type: .legalHoldDisabled,
                            sender: ZMUser.selfUser(in: self.managedObjectContext!),
                            users: nil,
                            clients: nil,
                            timestamp: timestampAfterLastMessage())
    }",0,,
"    private func appendLegalHoldDisabledSystemMessageForConversationAfterReceivingMessage(at timestamp: Date) {
        appendSystemMessage(type: .legalHoldDisabled,
                            sender: ZMUser.selfUser(in: self.managedObjectContext!),
                            users: nil,
                            clients: nil,
                            timestamp: timestamp.previousNearestTimestamp)
    }",0,,
"    private func acknowledgePrivacyChanges() {
        precondition(managedObjectContext?.zm_isUserInterfaceContext == true)

        
        if securityLevel == .secureWithIgnored {
            securityLevel = .notSecure
        }

        
        if legalHoldStatus == .pendingApproval {
            legalHoldStatus = .enabled
        }

        managedObjectContext?.saveOrRollback()
    }",0,,
"private func resendPendingMessagesAfterPrivacyChanges() {
        enumerateReverseMessagesThatCausedDegradationUntilFirstSystemMessageOnSyncContext {
            $0.causedSecurityLevelDegradation = false
            $0.resend()
        }
    }",0,,
"    private func discardPendingMessagesAfterPrivacyChanges() {
        guard let syncMOC = managedObjectContext?.zm_sync else { return }
        syncMOC.performGroupedBlock {
            guard let conversation = (try? syncMOC.existingObject(with: self.objectID)) as? ZMConversation else { return }
            conversation.clearMessagesThatCausedSecurityLevelDegradation()
            syncMOC.saveOrRollback()
        }
    }",0,,
"    @objc(acknowledgePrivacyWarningWithResendIntent:) public func acknowledgePrivacyWarning(withResendIntent shouldResendMessages: Bool) {
        acknowledgePrivacyChanges()

        if shouldResendMessages {
            resendPendingMessagesAfterPrivacyChanges()
        } else {
            discardPendingMessagesAfterPrivacyChanges()
        }
    }",0,,
"    private func enumerateReverseMessagesThatCausedDegradationUntilFirstSystemMessageOnSyncContext(block: @escaping (ZMOTRMessage)->()) {
        guard let syncMOC = self.managedObjectContext?.zm_sync else { return }
        syncMOC.performGroupedBlock {
            guard let conversation = (try? syncMOC.existingObject(with: self.objectID)) as? ZMConversation else { return }
            conversation.messagesThatCausedSecurityLevelDegradation.forEach(block)
            syncMOC.saveOrRollback()
        }
    }",0,,
"    fileprivate func expireAllPendingMessagesBecauseOfSecurityLevelDegradation() {
        for message in undeliveredMessages {
            if let clientMessage = message as? ZMClientMessage,
                let genericMessage = clientMessage.underlyingMessage,
                genericMessage.hasConfirmation {
                
                message.expire()
            } else {
                
                message.expire()
                message.causedSecurityLevelDegradation = true
            }
        }
    }",0,,
"@objc public func replaceNewClientMessageIfNeededWithNewDeviceMesssage() {

        let selfUser = ZMUser.selfUser(in: self.managedObjectContext!)
        guard let selfClient = selfUser.selfClient() else { return }
        
        NSOrderedSet(array: lastMessages()).enumerateObjects() { (msg, idx, stop) in
            guard idx <= 2 else {
                stop.initialize(to: true)
                return
            }
            
            guard let systemMessage = msg as? ZMSystemMessage,
                systemMessage.systemMessageType == .newClient,
                systemMessage.sender == selfUser else {
                    return
            }
            
            if systemMessage.clients.contains(selfClient) {
                systemMessage.systemMessageType = .usingNewDevice
                stop.initialize(to: true)
            }
        }
    }",0,,
"fileprivate func appendNewIsSecureSystemMessage(cause: SecurityChangeCause) {
        switch cause {
        case .removedUsers(let users):
            appendNewIsSecureSystemMessage(verified: [], for: users)
        case .verifiedClients(let userClients):
            let users = Set(userClients.compactMap { $0.user })
            appendNewIsSecureSystemMessage(verified: userClients, for: users)
        case .removedClients(let userClients):
            let users = Set(userClients.keys)
            let clients = Set(userClients.values.flatMap { $0 })
            appendNewIsSecureSystemMessage(verified: clients, for: users)
        default:
            
            return
        }
    }",0,,
"    fileprivate func appendNewIsSecureSystemMessage(verified clients: Set<UserClient>, for users: Set<ZMUser>) {
        guard !users.isEmpty, securityLevel != .secureWithIgnored else {
            return
        }

        appendSystemMessage(type: .conversationIsSecure,
                            sender: ZMUser.selfUser(in: self.managedObjectContext!),
                            users: users,
                            clients: clients,
                            timestamp: timestampAfterLastMessage())
    }",0,,
"    fileprivate func appendNewAddedClientSystemMessage(cause: SecurityChangeCause) {
        var timestamp : Date?
        var affectedUsers: Set<ZMUser> = []
        var addedUsers: Set<ZMUser> = []
        var addedClients: Set<UserClient> = []
        
        switch cause {
        case .addedUsers(let users):
            affectedUsers = users
            addedUsers = users
        case .addedClients(let clients, let message):
            affectedUsers = Set(clients.compactMap(\.user))
            addedClients = clients
            if let message = message, message.conversation == self {
                timestamp = self.timestamp(before: message)
            } else {
                timestamp = clients.compactMap(\.discoveryDate).first?.previousNearestTimestamp
            }
        default:
            
            return
        }
        
        guard !addedClients.isEmpty || !addedUsers.isEmpty else { return }
        
        self.appendSystemMessage(type: .newClient,
                                 sender: ZMUser.selfUser(in: self.managedObjectContext!),
                                 users: affectedUsers,
                                 addedUsers: addedUsers,
                                 clients: addedClients,
                                 timestamp: timestamp ?? timestampAfterLastMessage())
    }",0,,
"fileprivate func appendIgnoredClientsSystemMessage(ignored clients: Set<UserClient>) {
        guard !clients.isEmpty else { return }
        let users = Set(clients.compactMap { $0.user })
        self.appendSystemMessage(type: .ignoredClient,
                                 sender: ZMUser.selfUser(in: self.managedObjectContext!),
                                 users: users,
                                 clients: clients,
                                 timestamp: timestampAfterLastMessage())
    }",0,,
"    func appendSystemMessage(type: ZMSystemMessageType,
                                         sender: ZMUser,
                                         users: Set<ZMUser>?,
                                         addedUsers: Set<ZMUser> = Set(),
                                         clients: Set<UserClient>?,
                                         timestamp: Date,
                                         duration: TimeInterval? = nil,
                                         messageTimer: Double? = nil,
                                         relevantForStatus: Bool = true) -> ZMSystemMessage {
        let systemMessage = ZMSystemMessage(nonce: UUID(), managedObjectContext: managedObjectContext!)
        systemMessage.systemMessageType = type
        systemMessage.sender = sender
        systemMessage.users = users ?? Set()
        systemMessage.addedUsers = addedUsers
        systemMessage.clients = clients ?? Set()
        systemMessage.serverTimestamp = timestamp
        if let duration = duration {
            systemMessage.duration = duration
        }
        
        if let messageTimer = messageTimer {
            systemMessage.messageTimer = NSNumber(value: messageTimer)
        }
        
        systemMessage.relevantForConversationStatus = relevantForStatus
        
        self.append(systemMessage)
        
        return systemMessage
    }",0,,
"    fileprivate func timestamp(before: ZMMessage?) -> Date? {
        guard let timestamp = before?.serverTimestamp ?? self.lastModifiedDate else { return nil }
        return timestamp.previousNearestTimestamp
    }",0,,
"    fileprivate func timestamp(after: ZMConversationMessage?) -> Date? {
        guard let timestamp = after?.serverTimestamp ?? self.lastModifiedDate else { return nil }
        return timestamp.nextNearestTimestamp
    }",0,,
"    fileprivate func timestampAfterLastMessage() -> Date {
        return timestamp(after: lastMessage) ?? Date()
    }",0,,
"    fileprivate static func fetchStartedUsingOnThisDeviceMessage(conversation: ZMConversation) -> ZMSystemMessage? {
        guard let selfClient = ZMUser.selfUser(in: conversation.managedObjectContext!).selfClient() else { return nil }
        let conversationPredicate = NSPredicate(format: ""%K == %@ OR %K == %@"", ZMMessageConversationKey, conversation, ZMMessageHiddenInConversationKey, conversation)
        let newClientPredicate = NSPredicate(format: ""%K == %d"", ZMMessageSystemMessageTypeKey, ZMSystemMessageType.newClient.rawValue)
        let containsSelfClient = NSPredicate(format: ""ANY %K == %@"", ZMMessageSystemMessageClientsKey, selfClient)
        let compound = NSCompoundPredicate(andPredicateWithSubpredicates: [conversationPredicate, newClientPredicate, containsSelfClient])
        
        let fetchRequest = ZMSystemMessage.sortedFetchRequest(with: compound)
        
        let result = conversation.managedObjectContext!.fetchOrAssert(request: fetchRequest)
        return result.first as? ZMSystemMessage
    }",0,,
"private func perform(operations: GRPCIdleHandlerStateMachine.Operations) {
    
    if let event = operations.connectionManagerEvent, let manager = self.mode.connectionManager {
      switch event {
      case .idle:
        manager.idle()
      case .inactive:
        manager.channelInactive()
      case .ready:
        manager.ready()
      case .quiescing:
        manager.beginQuiescing()
      }
    }

    
    if let manager = self.mode.connectionManager,
      let maxConcurrentStreams = operations.maxConcurrentStreamsChange {
      manager.maxConcurrentStreamsChanged(maxConcurrentStreams)
    }

    
    if let idleTask = operations.idleTask {
      switch idleTask {
      case let .cancel(task):
        task.cancel()

      case .schedule:
        if self.idleTimeout != .nanoseconds(.max), let context = self.context {
          let task = context.eventLoop.scheduleTask(in: self.idleTimeout) {
            self.idleTimeoutFired()
          }
          self.perform(operations: self.stateMachine.scheduledIdleTimeoutTask(task))
        }
      }
    }

    
    if let streamID = operations.sendGoAwayWithLastPeerInitiatedStreamID {
      let goAwayFrame = HTTP2Frame(
        streamID: .rootStream,
        payload: .goAway(lastStreamID: streamID, errorCode: .noError, opaqueData: nil)
      )
      self.context?.writeAndFlush(self.wrapOutboundOut(goAwayFrame), promise: nil)
    }

    
    if operations.shouldCloseChannel, let context = self.context {
      
      
      context.eventLoop.execute {
        context.close(mode: .all, promise: nil)
      }
    }
  }",1,43,"      self.context?.writeAndFlush(self.wrapOutboundOut(goAwayFrame), promise: nil)"
"self.stateMachine = .init(role: .server, logger: logger)
    self.idleTimeout = idleTimeout
    self.pingHandler = PingHandler(
      pingCode: 10,
      interval: configuration.interval,
      timeout: configuration.timeout,
      permitWithoutCalls: configuration.permitWithoutCalls,
      maximumPingsWithoutData: configuration.maximumPingsWithoutData,
      minimumSentPingIntervalWithoutData: configuration.minimumSentPingIntervalWithoutData,
      minimumReceivedPingIntervalWithoutData: configuration.minimumReceivedPingIntervalWithoutData,
      maximumPingStrikes: configuration.maximumPingStrikes
    )
  }

  private func sendGoAway(lastStreamID streamID: HTTP2StreamID) {
    guard let context = self.context else {
      return
    }

    let frame = HTTP2Frame(
      streamID: .rootStream,
      payload: .goAway(lastStreamID: streamID, errorCode: .noError, opaqueData: nil)
    )

    context.writeAndFlush(self.wrapOutboundOut(frame), promise: nil)
  }",0,,
"  private func schedulePing(in delay: TimeAmount, timeout: TimeAmount) {
    guard delay != .nanoseconds(.max) else {
      return
    }

    self.scheduledPing = self.context?.eventLoop.scheduleRepeatedTask(
      initialDelay: delay,
      delay: delay
    ) { _ in
      self.handlePingAction(self.pingHandler.pingFired())
      
      
      assert(timeout < delay, ""`timeout` must be less than `interval`"")
      self.scheduleClose(in: timeout)
    }
  }",0,,
"  private func scheduleClose(in timeout: TimeAmount) {
    self.scheduledClose = self.context?.eventLoop.scheduleTask(in: timeout) {
      self.perform(operations: self.stateMachine.shutdownNow())
    }
  }",0,,
"  private func idleTimeoutFired() {
    self.perform(operations: self.stateMachine.idleTimeoutTaskFired())
  }",0,,
"  func handlerAdded(context: ChannelHandlerContext) {
    self.context = context
  }",0,,
"  func handlerRemoved(context: ChannelHandlerContext) {
    self.context = nil
  }",0,,
"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any) {
    if let created = event as? NIOHTTP2StreamCreatedEvent {
      self.perform(operations: self.stateMachine.streamCreated(withID: created.streamID))
      self.handlePingAction(self.pingHandler.streamCreated())
      context.fireUserInboundEventTriggered(event)
    } else if let closed = event as? StreamClosedEvent {
      self.perform(operations: self.stateMachine.streamClosed(withID: closed.streamID))
      self.handlePingAction(self.pingHandler.streamClosed())
      self.mode.connectionManager?.streamClosed()
      context.fireUserInboundEventTriggered(event)
    } else if event is ChannelShouldQuiesceEvent {
      self.perform(operations: self.stateMachine.initiateGracefulShutdown())
      
    } else {
      context.fireUserInboundEventTriggered(event)
    }
  }",0,,
"  func errorCaught(context: ChannelHandlerContext, error: Error) {
    
    self.mode.connectionManager?.channelError(error)
    context.fireErrorCaught(error)
  }",0,,
"  func channelActive(context: ChannelHandlerContext) {
    self.stateMachine.logger.addIPAddressMetadata(
      local: context.localAddress,
      remote: context.remoteAddress
    )

    
    switch self.mode {
    case let .client(connectionManager, multiplexer):
      connectionManager.channelActive(channel: context.channel, multiplexer: multiplexer)
    case .server:
      ()
    }
    context.fireChannelActive()
  }",0,,
"  func channelInactive(context: ChannelHandlerContext) {
    self.perform(operations: self.stateMachine.channelInactive())
    self.scheduledPing?.cancel()
    self.scheduledClose?.cancel()
    self.scheduledPing = nil
    self.scheduledClose = nil
    context.fireChannelInactive()
  }",0,,
"  func channelRead(context: ChannelHandlerContext, data: NIOAny) {
    let frame = self.unwrapInboundIn(data)

    switch frame.payload {
    case .goAway:
      self.perform(operations: self.stateMachine.receiveGoAway())
    case let .settings(.settings(settings)):
      self.perform(operations: self.stateMachine.receiveSettings(settings))
    case let .ping(data, ack):
      self.handlePingAction(self.pingHandler.read(pingData: data, ack: ack))
    default:
      
      ()
    }

    context.fireChannelRead(data)
  }",0,,
"private(set) var connectionManagerEvent: ConnectionManagerEvent?

    
    private(set) var maxConcurrentStreamsChange: Int?

    
    private(set) var idleTask: IdleTask?

    
    private(set) var sendGoAwayWithLastPeerInitiatedStreamID: HTTP2StreamID?

    
    private(set) var shouldCloseChannel: Bool

    fileprivate static let none = Operations()

    fileprivate mutating func sendGoAwayFrame(lastPeerInitiatedStreamID streamID: HTTP2StreamID) {
      self.sendGoAwayWithLastPeerInitiatedStreamID = streamID
    }",1,16,fileprivate mutating func sendGoAwayFrame(lastPeerInitiatedStreamID streamID: HTTP2StreamID) {
"self.state = .operating(.init(role: role))
    self.logger = logger
  }

  

  
  mutating func streamCreated(withID streamID: HTTP2StreamID) -> Operations {
    var operations: Operations = .none

    switch self.state {
    case var .operating(state):
      
      state.streamCreated(streamID, logger: self.logger)
      self.state = .operating(state)

    case let .waitingToIdle(state):
      var operating = Operating(fromWaitingToIdle: state)
      operating.streamCreated(streamID, logger: self.logger)
      self.state = .operating(operating)
      operations.cancelIdleTask(state.idleTask)

    case var .quiescing(state):
      precondition(state.initiatedByUs)
      precondition(state.role == .client)
      
      
      
      
      state.openStreams += 1
      self.state = .quiescing(state)

    case .closing, .closed:
      ()
    }

    return operations
  }",1,"23,24,25,26,27,28",precondition(state.initiatedByUs)/~/      precondition(state.role == .client)/~/      // If we're a client and we initiated shutdown then it's possible for streams to be created in/~/      // the quiescing state as there's a delay between stream channels (i.e. `HTTP2StreamChannel`)/~/      // being created and us being notified about their creation (via a user event fired by/~/      // the `HTTP2Handler`).
"fileprivate init(role: Role) {
      self.role = role
      self.openStreams = 0
      self.lastPeerInitiatedStreamID = .rootStream
      
      self.maxConcurrentStreams = 100
      self.hasSeenSettings = false
    }",0,,
"fileprivate init(fromWaitingToIdle state: WaitingToIdle) {
      self.role = state.role
      self.openStreams = 0
      self.lastPeerInitiatedStreamID = state.lastPeerInitiatedStreamID
      self.maxConcurrentStreams = state.maxConcurrentStreams
      
      self.hasSeenSettings = true
    }",0,,
"    fileprivate init(fromOperating state: Operating, idleTask: Scheduled<Void>) {
      
      assert(state.hasSeenSettings)

      self.role = state.role
      self.lastPeerInitiatedStreamID = state.lastPeerInitiatedStreamID
      self.maxConcurrentStreams = state.maxConcurrentStreams
      self.idleTask = idleTask
    }",0,,
"    fileprivate init(fromOperating state: Operating, initiatedByUs: Bool) {
      
      
      assert(initiatedByUs || state.hasSeenSettings)
      self.role = state.role
      self.initiatedByUs = initiatedByUs
      self.openStreams = state.openStreams
      self.lastPeerInitiatedStreamID = state.lastPeerInitiatedStreamID
      self.maxConcurrentStreams = state.maxConcurrentStreams
    }",0,,
"    fileprivate init(fromOperating state: Operating) {
      self.role = state.role
      
      self.shouldIdle = !state.hasOpenStreams && state.hasSeenSettings
    }",0,,
"    fileprivate init(fromQuiescing state: Quiescing) {
      self.role = state.role
      
      self.shouldIdle = !state.initiatedByUs
    }",0,,
"    fileprivate init(fromWaitingToIdle state: WaitingToIdle, shouldIdle: Bool = true) {
      self.role = state.role
      self.shouldIdle = shouldIdle
    }",0,,
"    fileprivate mutating func cancelIdleTask(_ task: Scheduled<Void>) {
      self.idleTask = .cancel(task)
    }",0,,
"    fileprivate mutating func scheduleIdleTask() {
      self.idleTask = .schedule
    }",0,,
"    fileprivate mutating func closeChannel() {
      self.shouldCloseChannel = true
    }",0,,
"    fileprivate mutating func notifyConnectionManager(about event: ConnectionManagerEvent) {
      self.connectionManagerEvent = event
    }",0,,
"    fileprivate mutating func maxConcurrentStreamsChanged(_ newValue: Int) {
      self.maxConcurrentStreamsChange = newValue
    }",0,,
"      self.state = .closing(.init(fromWaitingToIdle: state))
      operations.sendGoAwayFrame(lastPeerInitiatedStreamID: state.lastPeerInitiatedStreamID)
      operations.closeChannel()

    
    
    case .operating, .quiescing, .closing, .closed:
      ()
    }

    return operations
  }

  

  
  
  mutating func shutdownNow() -> Operations {
    var operations = Operations.none

    switch self.state {
    case let .operating(state):
      var closing = Closing(fromOperating: state)
      closing.shouldIdle = false
      self.state = .closing(closing)
      operations.closeChannel()
      operations.sendGoAwayFrame(lastPeerInitiatedStreamID: state.lastPeerInitiatedStreamID)

    case let .waitingToIdle(state):
      
      self.state = .closing(Closing(fromWaitingToIdle: state, shouldIdle: false))
      operations.closeChannel()
      operations.sendGoAwayFrame(lastPeerInitiatedStreamID: state.lastPeerInitiatedStreamID)
      operations.cancelIdleTask(state.idleTask)

    case let .quiescing(state):
      self.state = .closing(Closing(fromQuiescing: state))
      
      operations.closeChannel()

    case .closing, .closed:
      ()
    }

    return operations
  }",0,,
"  mutating func channelInactive() -> Operations {
    var operations: Operations = .none

    switch self.state {
    case let .operating(state):
      self.state = .closed

      
      if !state.hasSeenSettings || state.hasOpenStreams {
        
        operations.notifyConnectionManager(about: .inactive)
      } else {
        
        operations.notifyConnectionManager(about: .idle)
      }

    case let .waitingToIdle(state):
      self.state = .closed

      
      operations.notifyConnectionManager(about: .idle)
      operations.cancelIdleTask(state.idleTask)

    case let .quiescing(state):
      self.state = .closed

      if state.initiatedByUs || state.hasOpenStreams {
        operations.notifyConnectionManager(about: .inactive)
      } else {
        operations.notifyConnectionManager(about: .idle)
      }

    case let .closing(state):
      self.state = .closed

      if state.shouldIdle {
        operations.notifyConnectionManager(about: .idle)
      } else {
        operations.notifyConnectionManager(about: .inactive)
      }

    case .closed:
      ()
    }

    return operations
  }",0,,
"fileprivate mutating func streamCreated(_ streamID: HTTP2StreamID, logger: Logger) {
    self.openStreams += 1

    switch self.role {
    case .client where streamID.isServerInitiated:
      self.lastPeerInitiatedStreamID = streamID
    case .server where streamID.isClientInitiated:
      self.lastPeerInitiatedStreamID = streamID
    default:
      ()
    }

    logger.debug(""HTTP2 stream created"", metadata: [
      MetadataKey.h2StreamID: ""\(streamID)"",
      MetadataKey.h2ActiveStreams: ""\(self.openStreams)"",
    ])

    if self.openStreams == self.maxConcurrentStreams {
      logger.warning(""HTTP2 max concurrent stream limit reached"", metadata: [
        MetadataKey.h2ActiveStreams: ""\(self.openStreams)"",
      ])
    }
  }",0,,
"fileprivate mutating func streamClosed(_ streamID: HTTP2StreamID, logger: Logger) {
    self.openStreams -= 1

    logger.debug(""HTTP2 stream closed"", metadata: [
      MetadataKey.h2StreamID: ""\(streamID)"",
      MetadataKey.h2ActiveStreams: ""\(self.openStreams)"",
    ])
  }",0,,
"init(
    pingCode: UInt64,
    interval: TimeAmount,
    timeout: TimeAmount,
    permitWithoutCalls: Bool,
    maximumPingsWithoutData: UInt,
    minimumSentPingIntervalWithoutData: TimeAmount,
    minimumReceivedPingIntervalWithoutData: TimeAmount? = nil,
    maximumPingStrikes: UInt? = nil
  ) {
    self.pingCode = pingCode
    self.interval = interval
    self.timeout = timeout
    self.permitWithoutCalls = permitWithoutCalls
    self.maximumPingsWithoutData = maximumPingsWithoutData
    self.minimumSentPingIntervalWithoutData = minimumSentPingIntervalWithoutData
    self.minimumReceivedPingIntervalWithoutData = minimumReceivedPingIntervalWithoutData
    self.maximumPingStrikes = maximumPingStrikes
  }",1,10,    self.pingCode = pingCode
"private func handlePong(_ pingData: HTTP2PingData) -> Action {
    if pingData.integer == self.pingCode {
      return .cancelScheduledTimeout
    } else {
      return .none
    }
  }",1,1,    if pingData.integer == self.pingCode {
"private mutating func generatePingFrame(code: UInt64, ack: Bool) -> HTTP2Frame.FramePayload {
    if self.activeStreams == 0 {
      self.sentPingsWithoutData += 1
    }

    self.lastSentPingDate = self.now()
    return HTTP2Frame.FramePayload.ping(HTTP2PingData(withInteger: code), ack: ack)
  }",1,"0,6","private mutating func generatePingFrame(code: UInt64, ack: Bool) -> HTTP2Frame.FramePayload {/~/    return HTTP2Frame.FramePayload.ping(HTTP2PingData(withInteger: code), ack: ack)"
"private mutating func handlePing(_ pingData: HTTP2PingData) -> Action {
    
    if let maximumPingStrikes = self.maximumPingStrikes {
      
      if self.isPingStrike {
        self.pingStrikes += 1

        
        if maximumPingStrikes != 0, self.pingStrikes > maximumPingStrikes {
          return .reply(PingHandler.goAwayFrame)
        } else {
          return .none
        }
      } else {
        
        self.pingStrikes = 0
        self.lastReceivedPingDate = self.now()
        return .reply(self.generatePingFrame(code: pingData.integer, ack: true))
      }
    } else {
      
      
      
      
      return .reply(self.generatePingFrame(code: pingData.integer, ack: true))
    }
  }",1,"17,24","        return .reply(self.generatePingFrame(code: pingData.integer, ack: true))/~/      return .reply(self.generatePingFrame(code: pingData.integer, ack: true))"
"  mutating func pingFired() -> Action {
    if self.shouldBlockPing {
      return .none
    } else {
      return .reply(self.generatePingFrame(code: self.pingCode, ack: false))
    }
  }",1,4,"      return .reply(self.generatePingFrame(code: self.pingCode, ack: false))"
"didSet {
      if self.activeStreams > 0 {
        self.sentPingsWithoutData = 0
      }
    }",0,,
"mutating func streamCreated() -> Action {
    self.activeStreams += 1

    if self.startedAt == nil {
      self.startedAt = self.now()
      return .schedulePing(delay: self.interval, timeout: self.timeout)
    } else {
      return .none
    }
  }",0,,
"mutating func streamClosed() -> Action {
    self.activeStreams -= 1
    return .none
  }",0,,
"mutating func read(pingData: HTTP2PingData, ack: Bool) -> Action {
    if ack {
      return self.handlePong(pingData)
    } else {
      return self.handlePing(pingData)
    }
  }",0,,
"  private func now() -> NIODeadline {
    return self._testingOnlyNow ?? .now()
  }",0,,
"    func scheduleNotification(expositionInfo: ExpositionInfo) {
        var title, body: String?
        var sound: UNNotificationSound?
        formatter.dateFormat = ""dd.MM.YYYY""

        switch expositionInfo.level {
        case .exposed:
            title = ""NOTIFICATION_TITLE_EXPOSURE_HIGH"".localized
            body = ""NOTIFICATION_MESSAGE_EXPOSURE_HIGH"".localized
            sound = .defaultCritical
        default:
            debugPrint(""No notification for exposition: \(expositionInfo.level.rawValue)"")
        }

        if let title = title, let body = body, let sound = sound {
            scheduleNotification(title: title, body: body, sound: sound)
        }
    }",1,4,
"    func setupNotifications() -> Observable<Bool> {
        .create { (observer) -> Disposable in
            let notificationCenter = UNUserNotificationCenter.current()
            notificationCenter.delegate = self
            let options: UNAuthorizationOptions = [.alert, .sound]
            notificationCenter.requestAuthorization(options: options) { didAllow, error in
                if let error = error {
                    observer.onError(error)
                } else {
                    if !didAllow {
                        debugPrint(""User has declined notifications"")
                    }
                    observer.onNext(didAllow)
                    observer.onCompleted()
                }

            }
            return Disposables.create()
        }

    }",0,,
"func scheduleNotification(title: String, body: String, sound: UNNotificationSound) {

        let center = UNUserNotificationCenter.current()

        let content = UNMutableNotificationContent()

        content.title = title
        content.body = body
        content.sound = sound

        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)

        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
        center.add(request)
    }",0,,
"    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification,
                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        completionHandler([.alert, .sound, .badge])
    }",0,,
