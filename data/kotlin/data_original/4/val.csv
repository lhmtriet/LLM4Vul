processed_func,target
"    override fun getCurrentLocation(): Location = getCurrentPath().endLocation
}",0
"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0
"        private fun start(
            context: Context,
            delayInMinutes: Long,
            existingWorkPolicy: ExistingWorkPolicy
        ) {
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()
            val work =
                OneTimeWorkRequest
                    .Builder(FakeInfectionReportWorker::class.java)
                    .setInitialDelay(delayInMinutes, TimeUnit.MINUTES)
                    .setConstraints(constraints)
                    .build()
            WorkManager.getInstance(context)
                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
        }",0
"    override fun notifyFakeInfected(authCode: String): Completable =
        Completable.create {
            if (BuildConfig.isMock) {
                it.onComplete()
            } else {
                DP3T.sendFakeInfectedRequest(context,
                    ExposeeAuthMethodAuthorization(""Bearer $authCode""),
                    { it.onComplete() },
                    { it.onError(Exception(""Error notifying fake infection"")) }
                )
            }",0
"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0
"    override fun getSelectedLanguage(): String =
        preferences.getString(KEY_CURRENT_LANGUAGE, ""es-ES"") ?: ""es-ES""

    override fun setLabels(labels: Map<String, String>) {
        preferences.edit()
            .putString(KEY_LABELS, labels.toJson())
            .apply()
    }

    override fun getLabels(): Map<String, String> {
        val itemType = object : TypeToken<HashMap<String, String>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LABELS, ""{\""test\"":\""Hola Label\""}""
            ),
            itemType
        )
    }

    override fun setLanguages(languages: List<Language>) {
        preferences.edit()
            .putString(KEY_LANGUAGES, languages.toJson())
            .apply()
    }

    override fun getLanguages(): List<Language> {
        val itemType = object : TypeToken<List<Language>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LANGUAGES, ""[]""
            ),
            itemType
        )
    }

    override fun setRegions(regions: List<Region>) {
        preferences.edit()
            .putString(KEY_REGIONS, regions.toJson())
            .apply()
    }

    override fun getRegions(): List<Region> {
        val itemType = object : TypeToken<List<Region>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_REGIONS, ""[]""
            ),
            itemType
        )
    }

    override fun setHealingTime(healingTime: HealingTime) {
        preferences.edit()
            .putString(KEY_HEALING_TIME, healingTime.toJson())
            .apply()
    }

    override fun getHealingTime(): HealingTime {
        val healingTimeJson = preferences.getString(
            KEY_HEALING_TIME,
            ""{\n"" +
                    ""        \""exposureHighMinutes\"": 20160,\n"" +
                    ""        \""infectedMinutes\"": 43200\n"" +
                    ""    }""
        )
        return Gson().fromJson(healingTimeJson, HealingTime::class.java)
    }

    override fun getTDummy(): Long {
        return preferences.getLong(KEY_T_DUMMY, -1)
    }

    override fun setTDummy(time: Long) {
        preferences.edit().putLong(KEY_T_DUMMY, time).apply()
    }

}",0
"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0
"    override fun setExposed(exposed: Boolean) {
        preferences.edit()
            .putBoolean(KEY_WAS_EXPOSED, exposed)
            .apply()
    }",0
"    override fun exampleRequest(): Either<Throwable, String> = callService {
        apiInterface.test()
    }

}",1
"    override fun decodeElementIndex(descriptor: SerialDescriptor): Int = DECODE_DONE
}",0
"                            override fun checkClientTrusted(
                                    chain: Array<X509Certificate>,
                                    authType: String
                            ) {
                            }",1
"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0
"        override fun currentTimeMillis(): Long {
            return System.currentTimeMillis()
        }",0
"        fun start(context: Context) {
            start(context, getRandomDelay(), ExistingWorkPolicy.KEEP)
        }",0
"    override fun onCreate() {
        super.onCreate()

        initRxJavaSettings()

        DP3T.init(
            this,
            ApplicationInfo(packageName, BuildConfig.REPORT_URL, BuildConfig.BUCKET_URL),
            SignatureUtil.getPublicKeyFromBase64OrThrow(BuildConfig.PUBLIC_KEY),
            BuildConfig.DEBUG
        )
        DP3T.setCertificatePinner(certificatePinner)
        DP3T.setUserAgent(userAgent)

        FakeInfectionReportWorker.start(this)

        registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())

    }",0
"        private fun getRandomDelay(): Long = Random.nextLong(180, 360)

    }",1
"        private fun createPolymorphicMapDeserializer(node: YamlMap, context: SerializersModule, configuration: YamlConfiguration): YamlPolymorphicInput {
            val desiredKey = configuration.polymorphismPropertyName
            when (val typeName = node.getValue(desiredKey)) {
                is YamlList -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a list"", typeName.path)
                is YamlMap -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a map"", typeName.path)
                is YamlNull -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a null value"", typeName.path)
                is YamlTaggedNode -> throw InvalidPropertyValueException(desiredKey, ""expected a string, but got a tagged value"", typeName.path)
                is YamlScalar -> {
                    val remainingProperties = node.withoutKey(desiredKey)

                    return YamlPolymorphicInput(typeName.content, typeName.path, remainingProperties, context, configuration)
                }
            }
        }",0
"    override fun getCurrentPath(): YamlPath {
        return if (haveStartedReadingElements) {
            currentElementDecoder.node.path
        } else {
            list.path
        }
    }",0
"    override fun getTDummy(): Long {
        return preferences.getLong(KEY_T_DUMMY, -1)
    }",0
"    private fun initRxJavaSettings() {
        RxJavaPlugins.setErrorHandler {
            if (BuildConfig.DEBUG)
                it.printStackTrace()
        }
    }",0
"    fun write(baseline: Baseline, path: Path) {
        try {
            Files.newBufferedWriter(path).addFinalNewLine().use {
                it.streamXml().prettyPrinter().save(baseline)
            }
        } catch (error: XMLStreamException) {
            val (line, column) = error.positions
            throw InvalidState(""Error on position $line:$column while writing the baseline xml file!"", error)
        }
    }",0
"    override fun getLanguages(): List<Language> {
        val itemType = object : TypeToken<List<Language>>() {}.type
        return Gson().fromJson(
            preferences.getString(
                KEY_LANGUAGES, ""[]""
            ),
            itemType
        )
    }",0
"    override fun doWork(): Result {
        val now = clock.currentTimeMillis()
        var tDummy = inputData.getLong(KEY_T_DUMMY, now)
        while (tDummy < now) {
            if (tDummy >= now - FACTOR_HOUR_MILLIS * MAX_DELAY_HOURS) {
                if (BuildConfig.DEBUG)
                    DP3T.addWorkerStartedToHistory(applicationContext, TAG)
                reportFakeInfectionUseCase.reportFakeInfection().subscribe()
            }
            tDummy += clock.syncInterval();
            preferencesRepository.setTDummy(tDummy)
        }

        start(applicationContext, tDummy, ExistingWorkPolicy.APPEND)
        return Result.success()
    }",0
"    override fun decodeElementIndex(descriptor: SerialDescriptor): Int = 0
}",1
