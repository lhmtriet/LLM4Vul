processed_func,target
"    override fun getHealingTime(): HealingTime {
        val healingTimeJson = preferences.getString(
            KEY_HEALING_TIME,
            ""{\n"" +
                    ""        \""exposureHighMinutes\"": 20160,\n"" +
                    ""        \""infectedMinutes\"": 43200\n"" +
                    ""    }""
        )
        return Gson().fromJson(healingTimeJson, HealingTime::class.java)
    }",0
"        private fun getRandomDelay(): Long = Random.nextLong(180, 360)

    }",1
"    override fun decodeElementIndex(descriptor: SerialDescriptor): Int = 0
}",1
"                            override fun getAcceptedIssuers(): Array<X509Certificate?> {
                                return arrayOfNulls(0)
                            }",1
"    override fun setUuid(uuid: String) {
        preferences
            .edit()
            .putString(KEY_UUID, uuid)
            .apply()
    }",0
"        fun start(context: Context) {
            start(context, getRandomDelay(), ExistingWorkPolicy.KEEP)
        }",1
"        fun sampleFromStandard(): Double {
            val random = SecureRandom()
            return -ln(1.0 - random.nextDouble())
        }",0
"        override fun syncInterval(): Long {
            val newDelayDays: Double =
                ExponentialDistribution.sampleFromStandard() / SAMPLING_RATE
            return (newDelayDays * FACTOR_DAY_MILLIS).toLong()
        }",0
